"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_sanity_client_dist__chunks_stegaEncodeSourceMap-gZIRaYar_js"],{

/***/ "(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: function() { return /* binding */ encodeIntoResult; },\n/* harmony export */   stegaEncodeSourceMap: function() { return /* binding */ stegaEncodeSourceMap; },\n/* harmony export */   stegaEncodeSourceMap$1: function() { return /* binding */ stegaEncodeSourceMap$1; }\n/* harmony export */ });\n/* harmony import */ var _browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browserMiddleware-zDVeirri.js */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    if (typeof segment === \"string\") {\n        return reKeySegment.test(segment.trim());\n    }\n    return typeof segment === \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) {\n        throw new Error(\"Path is not an array\");\n    }\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") {\n            return \"\".concat(target, \"[\").concat(segment, \"]\");\n        }\n        if (segmentType === \"string\") {\n            const separator = i === 0 ? \"\" : \".\";\n            return \"\".concat(target).concat(separator).concat(segment);\n        }\n        if (isKeySegment(segment) && segment._key) {\n            return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        }\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return \"\".concat(target, \"[\").concat(from, \":\").concat(to, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(segment), \"`\"));\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nconst UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": \"\\n\",\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return \"$\".concat(path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"['\".concat(escapedKey, \"']\");\n        }\n        if (typeof segment === \"number\") {\n            return \"[\".concat(segment, \"]\");\n        }\n        if (segment._key !== \"\") {\n            const escapedKey = segment._key.replace(/['\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"[?(@._key=='\".concat(escapedKey, \"')]\");\n        }\n        return \"[\".concat(segment._index, \"]\");\n    }).join(\"\"));\n}\nfunction parseJsonPath(path) {\n    const parsed = [];\n    const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    while((match = parseRe.exec(path)) !== null){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._key !== \"\") {\n            return {\n                _key: segment._key\n            };\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!(csm == null ? void 0 : csm.mappings)) {\n        return void 0;\n    }\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) {\n        return {\n            mapping: csm.mappings[resultMappingPath],\n            matchedPath: resultMappingPath,\n            pathSuffix: \"\"\n        };\n    }\n    const mappings = Object.entries(csm.mappings).filter((param)=>{\n        let [key] = param;\n        return resultMappingPath.startsWith(key);\n    }).sort((param, param1)=>{\n        let [key1] = param, [key2] = param1;\n        return key2.length - key1.length;\n    });\n    if (mappings.length == 0) {\n        return void 0;\n    }\n    const [matchedPath, mapping] = mappings[0];\n    const pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn) {\n    let path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    if (isArray(value)) {\n        return value.map((v, idx)=>{\n            if (isRecord(v)) {\n                const _key = v[\"_key\"];\n                if (typeof _key === \"string\") {\n                    return walkMap(v, mappingFn, path.concat({\n                        _key,\n                        _index: idx\n                    }));\n                }\n            }\n            return walkMap(v, mappingFn, path.concat(idx));\n        });\n    }\n    if (isRecord(value)) {\n        return Object.fromEntries(Object.entries(value).map((param)=>{\n            let [k, v] = param;\n            return [\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ];\n        }));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) {\n            return value;\n        }\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\") {\n            return value;\n        }\n        if (mapping.source.type !== \"documentValue\") {\n            return value;\n        }\n        const sourceDocument = csm.documents[mapping.source.document];\n        const sourcePath = csm.paths[mapping.source.path];\n        const matchPathSegments = parseJsonPath(matchedPath);\n        const sourcePathSegments = parseJsonPath(sourcePath);\n        const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    if (id.startsWith(DRAFTS_PREFIX)) {\n        return id.slice(DRAFTS_PREFIX.length);\n    }\n    return id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path } = options;\n    if (!baseUrl) {\n        throw new Error(\"baseUrl is required\");\n    }\n    if (!path) {\n        throw new Error(\"path is required\");\n    }\n    if (!_id) {\n        throw new Error(\"id is required\");\n    }\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) {\n        throw new Error(\"baseUrl must not end with a slash\");\n    }\n    const workspace = _workspace === \"default\" ? void 0 : _workspace;\n    const tool = _tool === \"default\" ? void 0 : _tool;\n    const id = getPublishedId(_id);\n    const stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path;\n    const searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace) {\n        searchParams.set(\"workspace\", workspace);\n    }\n    if (tool) {\n        searchParams.set(\"tool\", tool);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    if (workspace) {\n        segments.push(workspace);\n    }\n    const routerParams = [\n        \"mode=presentation\",\n        \"id=\".concat(id),\n        \"type=\".concat(type),\n        \"path=\".concat(encodeURIComponent(stringifiedPath))\n    ];\n    if (tool) {\n        routerParams.push(\"tool=\".concat(tool));\n    }\n    segments.push(\"intent\", \"edit\", \"\".concat(routerParams.join(\";\"), \"?\").concat(searchParams));\n    return segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl === \"string\" ? studioUrl : studioUrl.baseUrl;\n    if (baseUrl !== \"/\") {\n        baseUrl = baseUrl.replace(/\\/$/, \"\");\n    }\n    if (typeof studioUrl === \"string\") {\n        return {\n            baseUrl\n        };\n    }\n    return {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = (param)=>{\n    let { sourcePath, value } = param;\n    if (isValidDate(value) || isValidURL(value)) {\n        return false;\n    }\n    const endPath = sourcePath.at(-1);\n    if (sourcePath.at(-2) === \"slug\" && endPath === \"current\") {\n        return false;\n    }\n    if (typeof endPath === \"string\" && endPath.startsWith(\"_\")) {\n        return false;\n    }\n    if (typeof endPath === \"number\" && sourcePath.at(-2) === \"marks\") {\n        return false;\n    }\n    if (endPath === \"href\" && typeof sourcePath.at(-2) === \"number\" && sourcePath.at(-3) === \"markDefs\") {\n        return false;\n    }\n    if (endPath === \"style\" || endPath === \"listItem\") {\n        return false;\n    }\n    if (sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\")) {\n        return false;\n    }\n    if (typeof endPath === \"string\" && denylist.has(endPath)) {\n        return false;\n    }\n    return true;\n};\nconst denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    if (!resultSourceMap) {\n        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, \"[@sanity/client/stega]: Missing Content Source Map from response body\", {\n            result,\n            resultSourceMap,\n            config\n        });\n        return result;\n    }\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        (_c = logger == null ? void 0 : logger.error) == null ? void 0 : _c.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    };\n    const resultWithStega = encodeIntoResult(result, resultSourceMap, (param)=>{\n        let { sourcePath, sourceDocument, resultPath, value } = param;\n        if ((typeof filter === \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === false) {\n            if (logger) {\n                report.skipped.push({\n                    path: prettyPathForLogging(sourcePath),\n                    value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                    length: value.length\n                });\n            }\n            return value;\n        }\n        if (logger) {\n            report.encoded.push({\n                path: prettyPathForLogging(sourcePath),\n                value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                length: value.length\n            });\n        }\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl === \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type } = sourceDocument;\n        return (0,_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.b)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        false);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length;\n        const isEncoding = report.encoded.length;\n        if (isSkipping || isEncoding) {\n            (_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null ? void 0 : _d(\"[@sanity/client/stega]: Encoding source map into result\");\n            (_e = logger.log) == null ? void 0 : _e.call(logger, \"[@sanity/client/stega]: Paths encoded: \".concat(report.encoded.length, \", skipped: \").concat(report.skipped.length));\n        }\n        if (report.encoded.length > 0) {\n            (_f = logger == null ? void 0 : logger.log) == null ? void 0 : _f.call(logger, \"[@sanity/client/stega]: Table of encoded paths\");\n            (_g = (logger == null ? void 0 : logger.table) || logger.log) == null ? void 0 : _g(report.encoded);\n        }\n        if (report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped){\n                skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            }\n            (_h = logger == null ? void 0 : logger.log) == null ? void 0 : _h.call(logger, \"[@sanity/client/stega]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        if (isSkipping || isEncoding) {\n            (_i = logger == null ? void 0 : logger.groupEnd) == null ? void 0 : _i.call(logger);\n        }\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap: stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap-gZIRaYar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L19jaHVua3Mvc3RlZ2FFbmNvZGVTb3VyY2VNYXAtZ1pJUmFZYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUVwRCxNQUFNQyxlQUFlO0FBQ3JCLFNBQVNDLGFBQWFDLE9BQU87SUFDM0IsSUFBSSxPQUFPQSxZQUFZLFVBQVU7UUFDL0IsT0FBT0YsYUFBYUcsSUFBSSxDQUFDRCxRQUFRRSxJQUFJO0lBQ3ZDO0lBQ0EsT0FBTyxPQUFPRixZQUFZLFlBQVksVUFBVUE7QUFDbEQ7QUFDQSxTQUFTRyxTQUFTQyxJQUFJO0lBQ3BCLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixPQUFPO1FBQ3hCLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUNBLE9BQU9ILEtBQUtJLE1BQU0sQ0FBQyxDQUFDQyxRQUFRVCxTQUFTVTtRQUNuQyxNQUFNQyxjQUFjLE9BQU9YO1FBQzNCLElBQUlXLGdCQUFnQixVQUFVO1lBQzVCLE9BQU8sR0FBR0MsTUFBTSxDQUFDSCxRQUFRLEtBQUtHLE1BQU0sQ0FBQ1osU0FBUztRQUNoRDtRQUNBLElBQUlXLGdCQUFnQixVQUFVO1lBQzVCLE1BQU1FLFlBQVlILE1BQU0sSUFBSSxLQUFLO1lBQ2pDLE9BQU8sR0FBR0UsTUFBTSxDQUFDSCxRQUFRRyxNQUFNLENBQUNDLFdBQVdELE1BQU0sQ0FBQ1o7UUFDcEQ7UUFDQSxJQUFJRCxhQUFhQyxZQUFZQSxRQUFRYyxJQUFJLEVBQUU7WUFDekMsT0FBTyxHQUFHRixNQUFNLENBQUNILFFBQVEsWUFBWUcsTUFBTSxDQUFDWixRQUFRYyxJQUFJLEVBQUU7UUFDNUQ7UUFDQSxJQUFJVCxNQUFNQyxPQUFPLENBQUNOLFVBQVU7WUFDMUIsTUFBTSxDQUFDZSxNQUFNQyxHQUFHLEdBQUdoQjtZQUNuQixPQUFPLEdBQUdZLE1BQU0sQ0FBQ0gsUUFBUSxLQUFLRyxNQUFNLENBQUNHLE1BQU0sS0FBS0gs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V0FBVyxHQUFFdkcsT0FBT3dHLE1BQU0sQ0FBQztJQUN0REMsV0FBVztJQUNYcEMsc0JBQXNCQTtBQUN4QjtBQUUwRSxDQUMxRSx5REFBeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvX2NodW5rcy9zdGVnYUVuY29kZVNvdXJjZU1hcC1nWklSYVlhci5qcz83MjU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGIgfSBmcm9tICcuL2Jyb3dzZXJNaWRkbGV3YXJlLXpEVmVpcnJpLmpzJztcblxuY29uc3QgcmVLZXlTZWdtZW50ID0gL19rZXlcXHMqPT1cXHMqWydcIl0oLiopWydcIl0vO1xuZnVuY3Rpb24gaXNLZXlTZWdtZW50KHNlZ21lbnQpIHtcbiAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHJlS2V5U2VnbWVudC50ZXN0KHNlZ21lbnQudHJpbSgpKTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIHNlZ21lbnQgPT09IFwib2JqZWN0XCIgJiYgXCJfa2V5XCIgaW4gc2VnbWVudDtcbn1cbmZ1bmN0aW9uIHRvU3RyaW5nKHBhdGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGF0aCBpcyBub3QgYW4gYXJyYXlcIik7XG4gIH1cbiAgcmV0dXJuIHBhdGgucmVkdWNlKCh0YXJnZXQsIHNlZ21lbnQsIGkpID0+IHtcbiAgICBjb25zdCBzZWdtZW50VHlwZSA9IHR5cGVvZiBzZWdtZW50O1xuICAgIGlmIChzZWdtZW50VHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRhcmdldCwgXCJbXCIpLmNvbmNhdChzZWdtZW50LCBcIl1cIik7XG4gICAgfVxuICAgIGlmIChzZWdtZW50VHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3Qgc2VwYXJhdG9yID0gaSA9PT0gMCA/IFwiXCIgOiBcIi5cIjtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0YXJnZXQpLmNvbmNhdChzZXBhcmF0b3IpLmNvbmNhdChzZWdtZW50KTtcbiAgICB9XG4gICAgaWYgKGlzS2V5U2VnbWVudChzZWdtZW50KSAmJiBzZWdtZW50Ll9rZXkpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0YXJnZXQsICdbX2tleT09XCInKS5jb25jYXQoc2VnbWVudC5fa2V5LCAnXCJdJyk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHNlZ21lbnQpKSB7XG4gICAgICBjb25zdCBbZnJvbSwgdG9dID0gc2VnbWVudDtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0YXJnZXQsIFwiW1wiKS5jb25jYXQoZnJvbSwgXCI6XCIpLmNvbmNhdCh0bywgXCJdXCIpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBwYXRoIHNlZ21lbnQgYFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShzZWdtZW50KSwgXCJgXCIpKTtcbiAgfSwgXCJcIik7XG59XG5cbmNvbnN0IEVTQ0FQRSA9IHtcbiAgXCJcXGZcIjogXCJcXFxcZlwiLFxuICBcIlxcblwiOiBcIlxcXFxuXCIsXG4gIFwiXFxyXCI6IFwiXFxcXHJcIixcbiAgXCJcdFwiOiBcIlxcXFx0XCIsXG4gIFwiJ1wiOiBcIlxcXFwnXCIsXG4gIFwiXFxcXFwiOiBcIlxcXFxcXFxcXCJcbn07XG5jb25zdCBVTkVTQ0FQRSA9IHtcbiAgXCJcXFxcZlwiOiBcIlxcZlwiLFxuICBcIlxcXFxuXCI6IFwiXFxuXCIsXG4gIFwiXFxcXHJcIjogXCJcXHJcIixcbiAgXCJcXFxcdFwiOiBcIlx0XCIsXG4gIFwiXFxcXCdcIjogXCInXCIsXG4gIFwiXFxcXFxcXFxcIjogXCJcXFxcXCJcbn07XG5mdW5jdGlvbiBqc29uUGF0aChwYXRoKSB7XG4gIHJldHVybiBcIiRcIi5jb25jYXQocGF0aC5tYXAoKHNlZ21lbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGVzY2FwZWRLZXkgPSBzZWdtZW50LnJlcGxhY2UoL1tcXGZcXG5cXHJcXHQnXFxcXF0vZywgKG1hdGNoKSA9PiB7XG4gICAgICAgIHJldHVybiBFU0NBUEVbbWF0Y2hdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gXCJbJ1wiLmNvbmNhdChlc2NhcGVkS2V5LCBcIiddXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBcIltcIi5jb25jYXQoc2VnbWVudCwgXCJdXCIpO1xuICAgIH1cbiAgICBpZiAoc2VnbWVudC5fa2V5ICE9PSBcIlwiKSB7XG4gICAgICBjb25zdCBlc2NhcGVkS2V5ID0gc2VnbWVudC5fa2V5LnJlcGxhY2UoL1snXFxcXF0vZywgKG1hdGNoKSA9PiB7XG4gICAgICAgIHJldHVybiBFU0NBUEVbbWF0Y2hdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gXCJbPyhALl9rZXk9PSdcIi5jb25jYXQoZXNjYXBlZEtleSwgXCInKV1cIik7XG4gICAgfVxuICAgIHJldHVybiBcIltcIi5jb25jYXQoc2VnbWVudC5faW5kZXgsIFwiXVwiKTtcbiAgfSkuam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiBwYXJzZUpzb25QYXRoKHBhdGgpIHtcbiAgY29uc3QgcGFyc2VkID0gW107XG4gIGNvbnN0IHBhcnNlUmUgPSAvXFxbJyguKj8pJ1xcXXxcXFsoXFxkKylcXF18XFxbXFw/XFwoQFxcLl9rZXk9PScoLio/KSdcXClcXF0vZztcbiAgbGV0IG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gcGFyc2VSZS5leGVjKHBhdGgpKSAhPT0gbnVsbCkge1xuICAgIGlmIChtYXRjaFsxXSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBrZXkgPSBtYXRjaFsxXS5yZXBsYWNlKC9cXFxcKFxcXFx8ZnxufHJ8dHwnKS9nLCAobSkgPT4ge1xuICAgICAgICByZXR1cm4gVU5FU0NBUEVbbV07XG4gICAgICB9KTtcbiAgICAgIHBhcnNlZC5wdXNoKGtleSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG1hdGNoWzJdICE9PSB2b2lkIDApIHtcbiAgICAgIHBhcnNlZC5wdXNoKHBhcnNlSW50KG1hdGNoWzJdLCAxMCkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChtYXRjaFszXSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBfa2V5ID0gbWF0Y2hbM10ucmVwbGFjZSgvXFxcXChcXFxcJykvZywgKG0pID0+IHtcbiAgICAgICAgcmV0dXJuIFVORVNDQVBFW21dO1xuICAgICAgfSk7XG4gICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgIF9rZXksXG4gICAgICAgIF9pbmRleDogLTFcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBqc29uUGF0aFRvU3R1ZGlvUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoLm1hcCgoc2VnbWVudCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2VnbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VnbWVudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfVxuICAgIGlmIChzZWdtZW50Ll9rZXkgIT09IFwiXCIpIHtcbiAgICAgIHJldHVybiB7IF9rZXk6IHNlZ21lbnQuX2tleSB9O1xuICAgIH1cbiAgICBpZiAoc2VnbWVudC5faW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gc2VnbWVudC5faW5kZXg7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2VnbWVudDpcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBqc29uUGF0aFRvTWFwcGluZ1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXAoKHNlZ21lbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBzZWdtZW50O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBzZWdtZW50O1xuICAgIH1cbiAgICBpZiAoc2VnbWVudC5faW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gc2VnbWVudC5faW5kZXg7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2VnbWVudDpcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNYXBwaW5nKHJlc3VsdFBhdGgsIGNzbSkge1xuICBpZiAoIShjc20gPT0gbnVsbCA/IHZvaWQgMCA6IGNzbS5tYXBwaW5ncykpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGNvbnN0IHJlc3VsdE1hcHBpbmdQYXRoID0ganNvblBhdGgoanNvblBhdGhUb01hcHBpbmdQYXRoKHJlc3VsdFBhdGgpKTtcbiAgaWYgKGNzbS5tYXBwaW5nc1tyZXN1bHRNYXBwaW5nUGF0aF0gIT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXBwaW5nOiBjc20ubWFwcGluZ3NbcmVzdWx0TWFwcGluZ1BhdGhdLFxuICAgICAgbWF0Y2hlZFBhdGg6IHJlc3VsdE1hcHBpbmdQYXRoLFxuICAgICAgcGF0aFN1ZmZpeDogXCJcIlxuICAgIH07XG4gIH1cbiAgY29uc3QgbWFwcGluZ3MgPSBPYmplY3QuZW50cmllcyhjc20ubWFwcGluZ3MpLmZpbHRlcigoW2tleV0pID0+IHJlc3VsdE1hcHBpbmdQYXRoLnN0YXJ0c1dpdGgoa2V5KSkuc29ydCgoW2tleTFdLCBba2V5Ml0pID0+IGtleTIubGVuZ3RoIC0ga2V5MS5sZW5ndGgpO1xuICBpZiAobWFwcGluZ3MubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGNvbnN0IFttYXRjaGVkUGF0aCwgbWFwcGluZ10gPSBtYXBwaW5nc1swXTtcbiAgY29uc3QgcGF0aFN1ZmZpeCA9IHJlc3VsdE1hcHBpbmdQYXRoLnN1YnN0cmluZyhtYXRjaGVkUGF0aC5sZW5ndGgpO1xuICByZXR1cm4geyBtYXBwaW5nLCBtYXRjaGVkUGF0aCwgcGF0aFN1ZmZpeCB9O1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNSZWNvcmQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gd2Fsa01hcCh2YWx1ZSwgbWFwcGluZ0ZuLCBwYXRoID0gW10pIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcCgodiwgaWR4KSA9PiB7XG4gICAgICBpZiAoaXNSZWNvcmQodikpIHtcbiAgICAgICAgY29uc3QgX2tleSA9IHZbXCJfa2V5XCJdO1xuICAgICAgICBpZiAodHlwZW9mIF9rZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm4gd2Fsa01hcCh2LCBtYXBwaW5nRm4sIHBhdGguY29uY2F0KHsgX2tleSwgX2luZGV4OiBpZHggfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gd2Fsa01hcCh2LCBtYXBwaW5nRm4sIHBhdGguY29uY2F0KGlkeCkpO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc1JlY29yZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW2ssIHZdKSA9PiBbaywgd2Fsa01hcCh2LCBtYXBwaW5nRm4sIHBhdGguY29uY2F0KGspKV0pXG4gICAgKTtcbiAgfVxuICByZXR1cm4gbWFwcGluZ0ZuKHZhbHVlLCBwYXRoKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlSW50b1Jlc3VsdChyZXN1bHQsIGNzbSwgZW5jb2Rlcikge1xuICByZXR1cm4gd2Fsa01hcChyZXN1bHQsICh2YWx1ZSwgcGF0aCkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZU1hcHBpbmdSZXN1bHQgPSByZXNvbHZlTWFwcGluZyhwYXRoLCBjc20pO1xuICAgIGlmICghcmVzb2x2ZU1hcHBpbmdSZXN1bHQpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBtYXBwaW5nLCBtYXRjaGVkUGF0aCB9ID0gcmVzb2x2ZU1hcHBpbmdSZXN1bHQ7XG4gICAgaWYgKG1hcHBpbmcudHlwZSAhPT0gXCJ2YWx1ZVwiKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nLnNvdXJjZS50eXBlICE9PSBcImRvY3VtZW50VmFsdWVcIikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2VEb2N1bWVudCA9IGNzbS5kb2N1bWVudHNbbWFwcGluZy5zb3VyY2UuZG9jdW1lbnRdO1xuICAgIGNvbnN0IHNvdXJjZVBhdGggPSBjc20ucGF0aHNbbWFwcGluZy5zb3VyY2UucGF0aF07XG4gICAgY29uc3QgbWF0Y2hQYXRoU2VnbWVudHMgPSBwYXJzZUpzb25QYXRoKG1hdGNoZWRQYXRoKTtcbiAgICBjb25zdCBzb3VyY2VQYXRoU2VnbWVudHMgPSBwYXJzZUpzb25QYXRoKHNvdXJjZVBhdGgpO1xuICAgIGNvbnN0IGZ1bGxTb3VyY2VTZWdtZW50cyA9IHNvdXJjZVBhdGhTZWdtZW50cy5jb25jYXQocGF0aC5zbGljZShtYXRjaFBhdGhTZWdtZW50cy5sZW5ndGgpKTtcbiAgICByZXR1cm4gZW5jb2Rlcih7XG4gICAgICBzb3VyY2VQYXRoOiBmdWxsU291cmNlU2VnbWVudHMsXG4gICAgICBzb3VyY2VEb2N1bWVudCxcbiAgICAgIHJlc3VsdFBhdGg6IHBhdGgsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY29uc3QgRFJBRlRTX1BSRUZJWCA9IFwiZHJhZnRzLlwiO1xuZnVuY3Rpb24gZ2V0UHVibGlzaGVkSWQoaWQpIHtcbiAgaWYgKGlkLnN0YXJ0c1dpdGgoRFJBRlRTX1BSRUZJWCkpIHtcbiAgICByZXR1cm4gaWQuc2xpY2UoRFJBRlRTX1BSRUZJWC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBpZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWRpdFVybChvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBiYXNlVXJsLFxuICAgIHdvcmtzcGFjZTogX3dvcmtzcGFjZSA9IFwiZGVmYXVsdFwiLFxuICAgIHRvb2w6IF90b29sID0gXCJkZWZhdWx0XCIsXG4gICAgaWQ6IF9pZCxcbiAgICB0eXBlLFxuICAgIHBhdGhcbiAgfSA9IG9wdGlvbnM7XG4gIGlmICghYmFzZVVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhc2VVcmwgaXMgcmVxdWlyZWRcIik7XG4gIH1cbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGF0aCBpcyByZXF1aXJlZFwiKTtcbiAgfVxuICBpZiAoIV9pZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImlkIGlzIHJlcXVpcmVkXCIpO1xuICB9XG4gIGlmIChiYXNlVXJsICE9PSBcIi9cIiAmJiBiYXNlVXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhc2VVcmwgbXVzdCBub3QgZW5kIHdpdGggYSBzbGFzaFwiKTtcbiAgfVxuICBjb25zdCB3b3Jrc3BhY2UgPSBfd29ya3NwYWNlID09PSBcImRlZmF1bHRcIiA/IHZvaWQgMCA6IF93b3Jrc3BhY2U7XG4gIGNvbnN0IHRvb2wgPSBfdG9vbCA9PT0gXCJkZWZhdWx0XCIgPyB2b2lkIDAgOiBfdG9vbDtcbiAgY29uc3QgaWQgPSBnZXRQdWJsaXNoZWRJZChfaWQpO1xuICBjb25zdCBzdHJpbmdpZmllZFBhdGggPSBBcnJheS5pc0FycmF5KHBhdGgpID8gdG9TdHJpbmcoanNvblBhdGhUb1N0dWRpb1BhdGgocGF0aCkpIDogcGF0aDtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgYmFzZVVybCxcbiAgICBpZCxcbiAgICB0eXBlLFxuICAgIHBhdGg6IHN0cmluZ2lmaWVkUGF0aFxuICB9KTtcbiAgaWYgKHdvcmtzcGFjZSkge1xuICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJ3b3Jrc3BhY2VcIiwgd29ya3NwYWNlKTtcbiAgfVxuICBpZiAodG9vbCkge1xuICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJ0b29sXCIsIHRvb2wpO1xuICB9XG4gIGNvbnN0IHNlZ21lbnRzID0gW2Jhc2VVcmwgPT09IFwiL1wiID8gXCJcIiA6IGJhc2VVcmxdO1xuICBpZiAod29ya3NwYWNlKSB7XG4gICAgc2VnbWVudHMucHVzaCh3b3Jrc3BhY2UpO1xuICB9XG4gIGNvbnN0IHJvdXRlclBhcmFtcyA9IFtcbiAgICBcIm1vZGU9cHJlc2VudGF0aW9uXCIsXG4gICAgXCJpZD1cIi5jb25jYXQoaWQpLFxuICAgIFwidHlwZT1cIi5jb25jYXQodHlwZSksXG4gICAgXCJwYXRoPVwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZpZWRQYXRoKSlcbiAgXTtcbiAgaWYgKHRvb2wpIHtcbiAgICByb3V0ZXJQYXJhbXMucHVzaChcInRvb2w9XCIuY29uY2F0KHRvb2wpKTtcbiAgfVxuICBzZWdtZW50cy5wdXNoKFwiaW50ZW50XCIsIFwiZWRpdFwiLCBcIlwiLmNvbmNhdChyb3V0ZXJQYXJhbXMuam9pbihcIjtcIiksIFwiP1wiKS5jb25jYXQoc2VhcmNoUGFyYW1zKSk7XG4gIHJldHVybiBzZWdtZW50cy5qb2luKFwiL1wiKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVN0dWRpb0Jhc2VSb3V0ZShzdHVkaW9VcmwpIHtcbiAgbGV0IGJhc2VVcmwgPSB0eXBlb2Ygc3R1ZGlvVXJsID09PSBcInN0cmluZ1wiID8gc3R1ZGlvVXJsIDogc3R1ZGlvVXJsLmJhc2VVcmw7XG4gIGlmIChiYXNlVXJsICE9PSBcIi9cIikge1xuICAgIGJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcbiAgfVxuICBpZiAodHlwZW9mIHN0dWRpb1VybCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7IGJhc2VVcmwgfTtcbiAgfVxuICByZXR1cm4geyAuLi5zdHVkaW9VcmwsIGJhc2VVcmwgfTtcbn1cblxuY29uc3QgZmlsdGVyRGVmYXVsdCA9ICh7IHNvdXJjZVBhdGgsIHZhbHVlIH0pID0+IHtcbiAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1ZhbGlkVVJMKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBlbmRQYXRoID0gc291cmNlUGF0aC5hdCgtMSk7XG4gIGlmIChzb3VyY2VQYXRoLmF0KC0yKSA9PT0gXCJzbHVnXCIgJiYgZW5kUGF0aCA9PT0gXCJjdXJyZW50XCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmRQYXRoID09PSBcInN0cmluZ1wiICYmIGVuZFBhdGguc3RhcnRzV2l0aChcIl9cIikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmRQYXRoID09PSBcIm51bWJlclwiICYmIHNvdXJjZVBhdGguYXQoLTIpID09PSBcIm1hcmtzXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGVuZFBhdGggPT09IFwiaHJlZlwiICYmIHR5cGVvZiBzb3VyY2VQYXRoLmF0KC0yKSA9PT0gXCJudW1iZXJcIiAmJiBzb3VyY2VQYXRoLmF0KC0zKSA9PT0gXCJtYXJrRGVmc1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChlbmRQYXRoID09PSBcInN0eWxlXCIgfHwgZW5kUGF0aCA9PT0gXCJsaXN0SXRlbVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChzb3VyY2VQYXRoLnNvbWUoXG4gICAgKHBhdGgpID0+IHBhdGggPT09IFwibWV0YVwiIHx8IHBhdGggPT09IFwibWV0YWRhdGFcIiB8fCBwYXRoID09PSBcIm9wZW5HcmFwaFwiIHx8IHBhdGggPT09IFwic2VvXCJcbiAgKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGVuZFBhdGggPT09IFwic3RyaW5nXCIgJiYgZGVueWxpc3QuaGFzKGVuZFBhdGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IGRlbnlsaXN0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICBcImNvbG9yXCIsXG4gIFwiY29sb3VyXCIsXG4gIFwiY3VycmVuY3lcIixcbiAgXCJlbWFpbFwiLFxuICBcImZvcm1hdFwiLFxuICBcImdpZFwiLFxuICBcImhleFwiLFxuICBcImhyZWZcIixcbiAgXCJoc2xcIixcbiAgXCJoc2xhXCIsXG4gIFwiaWNvblwiLFxuICBcImlkXCIsXG4gIFwiaW5kZXhcIixcbiAgXCJrZXlcIixcbiAgXCJsYW5ndWFnZVwiLFxuICBcImxheW91dFwiLFxuICBcImxpbmtcIixcbiAgXCJsaW5rQWN0aW9uXCIsXG4gIFwibG9jYWxlXCIsXG4gIFwibHFpcFwiLFxuICBcInBhZ2VcIixcbiAgXCJwYXRoXCIsXG4gIFwicmVmXCIsXG4gIFwicmdiXCIsXG4gIFwicmdiYVwiLFxuICBcInJvdXRlXCIsXG4gIFwic2VjcmV0XCIsXG4gIFwic2x1Z1wiLFxuICBcInN0YXR1c1wiLFxuICBcInRhZ1wiLFxuICBcInRlbXBsYXRlXCIsXG4gIFwidGhlbWVcIixcbiAgXCJ0eXBlXCIsXG4gIFwidW5pdFwiLFxuICBcInVybFwiLFxuICBcInVzZXJuYW1lXCIsXG4gIFwidmFyaWFudFwiLFxuICBcIndlYnNpdGVcIlxuXSk7XG5mdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlU3RyaW5nKSB7XG4gIHJldHVybiAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9Ly50ZXN0KGRhdGVTdHJpbmcpID8gQm9vbGVhbihEYXRlLnBhcnNlKGRhdGVTdHJpbmcpKSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZFVSTCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBuZXcgVVJMKHVybCwgdXJsLnN0YXJ0c1dpdGgoXCIvXCIpID8gXCJodHRwczovL2FjbWUuY29tXCIgOiB2b2lkIDApO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmNvbnN0IFRSVU5DQVRFX0xFTkdUSCA9IDIwO1xuZnVuY3Rpb24gc3RlZ2FFbmNvZGVTb3VyY2VNYXAocmVzdWx0LCByZXN1bHRTb3VyY2VNYXAsIGNvbmZpZykge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaTtcbiAgY29uc3QgeyBmaWx0ZXIsIGxvZ2dlciwgZW5hYmxlZCB9ID0gY29uZmlnO1xuICBpZiAoIWVuYWJsZWQpIHtcbiAgICBjb25zdCBtc2cgPSBcImNvbmZpZy5lbmFibGVkIG11c3QgYmUgdHJ1ZSwgZG9uJ3QgY2FsbCB0aGlzIGZ1bmN0aW9uIG90aGVyd2lzZVwiO1xuICAgIChfYSA9IGxvZ2dlciA9PSBudWxsID8gdm9pZCAwIDogbG9nZ2VyLmVycm9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChsb2dnZXIsIFwiW0BzYW5pdHkvY2xpZW50L3N0ZWdhXTogXCIuY29uY2F0KG1zZyksIHsgcmVzdWx0LCByZXN1bHRTb3VyY2VNYXAsIGNvbmZpZyB9KTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyk7XG4gIH1cbiAgaWYgKCFyZXN1bHRTb3VyY2VNYXApIHtcbiAgICAoX2IgPSBsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5lcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwobG9nZ2VyLCBcIltAc2FuaXR5L2NsaWVudC9zdGVnYV06IE1pc3NpbmcgQ29udGVudCBTb3VyY2UgTWFwIGZyb20gcmVzcG9uc2UgYm9keVwiLCB7XG4gICAgICByZXN1bHQsXG4gICAgICByZXN1bHRTb3VyY2VNYXAsXG4gICAgICBjb25maWdcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghY29uZmlnLnN0dWRpb1VybCkge1xuICAgIGNvbnN0IG1zZyA9IFwiY29uZmlnLnN0dWRpb1VybCBtdXN0IGJlIGRlZmluZWRcIjtcbiAgICAoX2MgPSBsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5lcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNhbGwobG9nZ2VyLCBcIltAc2FuaXR5L2NsaWVudC9zdGVnYV06IFwiLmNvbmNhdChtc2cpLCB7IHJlc3VsdCwgcmVzdWx0U291cmNlTWFwLCBjb25maWcgfSk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICB9XG4gIGNvbnN0IHJlcG9ydCA9IHtcbiAgICBlbmNvZGVkOiBbXSxcbiAgICBza2lwcGVkOiBbXVxuICB9O1xuICBjb25zdCByZXN1bHRXaXRoU3RlZ2EgPSBlbmNvZGVJbnRvUmVzdWx0KFxuICAgIHJlc3VsdCxcbiAgICByZXN1bHRTb3VyY2VNYXAsXG4gICAgKHsgc291cmNlUGF0aCwgc291cmNlRG9jdW1lbnQsIHJlc3VsdFBhdGgsIHZhbHVlIH0pID0+IHtcbiAgICAgIGlmICgodHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiID8gZmlsdGVyKHsgc291cmNlUGF0aCwgcmVzdWx0UGF0aCwgZmlsdGVyRGVmYXVsdCwgc291cmNlRG9jdW1lbnQsIHZhbHVlIH0pIDogZmlsdGVyRGVmYXVsdCh7IHNvdXJjZVBhdGgsIHJlc3VsdFBhdGgsIGZpbHRlckRlZmF1bHQsIHNvdXJjZURvY3VtZW50LCB2YWx1ZSB9KSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChsb2dnZXIpIHtcbiAgICAgICAgICByZXBvcnQuc2tpcHBlZC5wdXNoKHtcbiAgICAgICAgICAgIHBhdGg6IHByZXR0eVBhdGhGb3JMb2dnaW5nKHNvdXJjZVBhdGgpLFxuICAgICAgICAgICAgdmFsdWU6IFwiXCIuY29uY2F0KHZhbHVlLnNsaWNlKDAsIFRSVU5DQVRFX0xFTkdUSCkpLmNvbmNhdCh2YWx1ZS5sZW5ndGggPiBUUlVOQ0FURV9MRU5HVEggPyBcIi4uLlwiIDogXCJcIiksXG4gICAgICAgICAgICBsZW5ndGg6IHZhbHVlLmxlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChsb2dnZXIpIHtcbiAgICAgICAgcmVwb3J0LmVuY29kZWQucHVzaCh7XG4gICAgICAgICAgcGF0aDogcHJldHR5UGF0aEZvckxvZ2dpbmcoc291cmNlUGF0aCksXG4gICAgICAgICAgdmFsdWU6IFwiXCIuY29uY2F0KHZhbHVlLnNsaWNlKDAsIFRSVU5DQVRFX0xFTkdUSCkpLmNvbmNhdCh2YWx1ZS5sZW5ndGggPiBUUlVOQ0FURV9MRU5HVEggPyBcIi4uLlwiIDogXCJcIiksXG4gICAgICAgICAgbGVuZ3RoOiB2YWx1ZS5sZW5ndGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGJhc2VVcmwsIHdvcmtzcGFjZSwgdG9vbCB9ID0gcmVzb2x2ZVN0dWRpb0Jhc2VSb3V0ZShcbiAgICAgICAgdHlwZW9mIGNvbmZpZy5zdHVkaW9VcmwgPT09IFwiZnVuY3Rpb25cIiA/IGNvbmZpZy5zdHVkaW9Vcmwoc291cmNlRG9jdW1lbnQpIDogY29uZmlnLnN0dWRpb1VybFxuICAgICAgKTtcbiAgICAgIGlmICghYmFzZVVybClcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgY29uc3QgeyBfaWQ6IGlkLCBfdHlwZTogdHlwZSB9ID0gc291cmNlRG9jdW1lbnQ7XG4gICAgICByZXR1cm4gYihcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHtcbiAgICAgICAgICBvcmlnaW46IFwic2FuaXR5LmlvXCIsXG4gICAgICAgICAgaHJlZjogY3JlYXRlRWRpdFVybCh7XG4gICAgICAgICAgICBiYXNlVXJsLFxuICAgICAgICAgICAgd29ya3NwYWNlLFxuICAgICAgICAgICAgdG9vbCxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIHBhdGg6IHNvdXJjZVBhdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICAvLyBXZSB1c2UgY3VzdG9tIGxvZ2ljIHRvIGRldGVybWluZSBpZiB3ZSBzaG91bGQgc2tpcCBlbmNvZGluZ1xuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICk7XG4gIGlmIChsb2dnZXIpIHtcbiAgICBjb25zdCBpc1NraXBwaW5nID0gcmVwb3J0LnNraXBwZWQubGVuZ3RoO1xuICAgIGNvbnN0IGlzRW5jb2RpbmcgPSByZXBvcnQuZW5jb2RlZC5sZW5ndGg7XG4gICAgaWYgKGlzU2tpcHBpbmcgfHwgaXNFbmNvZGluZykge1xuICAgICAgKF9kID0gKGxvZ2dlciA9PSBudWxsID8gdm9pZCAwIDogbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKSB8fCBsb2dnZXIubG9nKSA9PSBudWxsID8gdm9pZCAwIDogX2QoXG4gICAgICAgIFwiW0BzYW5pdHkvY2xpZW50L3N0ZWdhXTogRW5jb2Rpbmcgc291cmNlIG1hcCBpbnRvIHJlc3VsdFwiXG4gICAgICApO1xuICAgICAgKF9lID0gbG9nZ2VyLmxvZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLmNhbGwoXG4gICAgICAgIGxvZ2dlcixcbiAgICAgICAgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBQYXRocyBlbmNvZGVkOiBcIi5jb25jYXQocmVwb3J0LmVuY29kZWQubGVuZ3RoLCBcIiwgc2tpcHBlZDogXCIpLmNvbmNhdChyZXBvcnQuc2tpcHBlZC5sZW5ndGgpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAocmVwb3J0LmVuY29kZWQubGVuZ3RoID4gMCkge1xuICAgICAgKF9mID0gbG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIubG9nKSA9PSBudWxsID8gdm9pZCAwIDogX2YuY2FsbChsb2dnZXIsIFwiW0BzYW5pdHkvY2xpZW50L3N0ZWdhXTogVGFibGUgb2YgZW5jb2RlZCBwYXRoc1wiKTtcbiAgICAgIChfZyA9IChsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci50YWJsZSkgfHwgbG9nZ2VyLmxvZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nKHJlcG9ydC5lbmNvZGVkKTtcbiAgICB9XG4gICAgaWYgKHJlcG9ydC5za2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHNraXBwZWQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgZm9yIChjb25zdCB7IHBhdGggfSBvZiByZXBvcnQuc2tpcHBlZCkge1xuICAgICAgICBza2lwcGVkLmFkZChwYXRoLnJlcGxhY2UocmVLZXlTZWdtZW50LCBcIjBcIikucmVwbGFjZSgvXFxbXFxkK1xcXS9nLCBcIltdXCIpKTtcbiAgICAgIH1cbiAgICAgIChfaCA9IGxvZ2dlciA9PSBudWxsID8gdm9pZCAwIDogbG9nZ2VyLmxvZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmNhbGwobG9nZ2VyLCBcIltAc2FuaXR5L2NsaWVudC9zdGVnYV06IExpc3Qgb2Ygc2tpcHBlZCBwYXRoc1wiLCBbLi4uc2tpcHBlZC52YWx1ZXMoKV0pO1xuICAgIH1cbiAgICBpZiAoaXNTa2lwcGluZyB8fCBpc0VuY29kaW5nKSB7XG4gICAgICAoX2kgPSBsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5ncm91cEVuZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9pLmNhbGwobG9nZ2VyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFdpdGhTdGVnYTtcbn1cbmZ1bmN0aW9uIHByZXR0eVBhdGhGb3JMb2dnaW5nKHBhdGgpIHtcbiAgcmV0dXJuIHRvU3RyaW5nKGpzb25QYXRoVG9TdHVkaW9QYXRoKHBhdGgpKTtcbn1cblxudmFyIHN0ZWdhRW5jb2RlU291cmNlTWFwJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgc3RlZ2FFbmNvZGVTb3VyY2VNYXA6IHN0ZWdhRW5jb2RlU291cmNlTWFwXG59KTtcblxuZXhwb3J0IHsgZW5jb2RlSW50b1Jlc3VsdCwgc3RlZ2FFbmNvZGVTb3VyY2VNYXAsIHN0ZWdhRW5jb2RlU291cmNlTWFwJDEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZWdhRW5jb2RlU291cmNlTWFwLWdaSVJhWWFyLmpzLm1hcFxuIl0sIm5hbWVzIjpbImIiLCJyZUtleVNlZ21lbnQiLCJpc0tleVNlZ21lbnQiLCJzZWdtZW50IiwidGVzdCIsInRyaW0iLCJ0b1N0cmluZyIsInBhdGgiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInJlZHVjZSIsInRhcmdldCIsImkiLCJzZWdtZW50VHlwZSIsImNvbmNhdCIsInNlcGFyYXRvciIsIl9rZXkiLCJmcm9tIiwidG8iLCJKU09OIiwic3RyaW5naWZ5IiwiRVNDQVBFIiwiVU5FU0NBUEUiLCJqc29uUGF0aCIsIm1hcCIsImVzY2FwZWRLZXkiLCJyZXBsYWNlIiwibWF0Y2giLCJfaW5kZXgiLCJqb2luIiwicGFyc2VKc29uUGF0aCIsInBhcnNlZCIsInBhcnNlUmUiLCJleGVjIiwia2V5IiwibSIsInB1c2giLCJwYXJzZUludCIsImpzb25QYXRoVG9TdHVkaW9QYXRoIiwianNvblBhdGhUb01hcHBpbmdQYXRoIiwicmVzb2x2ZU1hcHBpbmciLCJyZXN1bHRQYXRoIiwiY3NtIiwibWFwcGluZ3MiLCJyZXN1bHRNYXBwaW5nUGF0aCIsIm1hcHBpbmciLCJtYXRjaGVkUGF0aCIsInBhdGhTdWZmaXgiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyIiwic3RhcnRzV2l0aCIsInNvcnQiLCJrZXkxIiwia2V5MiIsImxlbmd0aCIsInN1YnN0cmluZyIsInZhbHVlIiwiaXNSZWNvcmQiLCJ3YWxrTWFwIiwibWFwcGluZ0ZuIiwidiIsImlkeCIsImZyb21FbnRyaWVzIiwiayIsImVuY29kZUludG9SZXN1bHQiLCJyZXN1bHQiLCJlbmNvZGVyIiwicmVzb2x2ZU1hcHBpbmdSZXN1bHQiLCJ0eXBlIiwic291cmNlIiwic291cmNlRG9jdW1lbnQiLCJkb2N1bWVudHMiLCJkb2N1bWVudCIsInNvdXJjZVBhdGgiLCJwYXRocyIsIm1hdGNoUGF0aFNlZ21lbnRzIiwic291cmNlUGF0aFNlZ21lbnRzIiwiZnVsbFNvdXJjZVNlZ21lbnRzIiwic2xpY2UiLCJEUkFGVFNfUFJFRklYIiwiZ2V0UHVibGlzaGVkSWQiLCJpZCIsImNyZWF0ZUVkaXRVcmwiLCJvcHRpb25zIiwiYmFzZVVybCIsIndvcmtzcGFjZSIsIl93b3Jrc3BhY2UiLCJ0b29sIiwiX3Rvb2wiLCJfaWQiLCJlbmRzV2l0aCIsInN0cmluZ2lmaWVkUGF0aCIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInNldCIsInNlZ21lbnRzIiwicm91dGVyUGFyYW1zIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVzb2x2ZVN0dWRpb0Jhc2VSb3V0ZSIsInN0dWRpb1VybCIsImZpbHRlckRlZmF1bHQiLCJpc1ZhbGlkRGF0ZSIsImlzVmFsaWRVUkwiLCJlbmRQYXRoIiwiYXQiLCJzb21lIiwiZGVueWxpc3QiLCJoYXMiLCJTZXQiLCJkYXRlU3RyaW5nIiwiQm9vbGVhbiIsIkRhdGUiLCJwYXJzZSIsInVybCIsIlVSTCIsIlRSVU5DQVRFX0xFTkdUSCIsInN0ZWdhRW5jb2RlU291cmNlTWFwIiwicmVzdWx0U291cmNlTWFwIiwiY29uZmlnIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIl9pIiwibG9nZ2VyIiwiZW5hYmxlZCIsIm1zZyIsImVycm9yIiwiY2FsbCIsIlR5cGVFcnJvciIsInJlcG9ydCIsImVuY29kZWQiLCJza2lwcGVkIiwicmVzdWx0V2l0aFN0ZWdhIiwicHJldHR5UGF0aEZvckxvZ2dpbmciLCJfdHlwZSIsIm9yaWdpbiIsImhyZWYiLCJpc1NraXBwaW5nIiwiaXNFbmNvZGluZyIsImdyb3VwQ29sbGFwc2VkIiwibG9nIiwidGFibGUiLCJhZGQiLCJ2YWx1ZXMiLCJncm91cEVuZCIsInN0ZWdhRW5jb2RlU291cmNlTWFwJDEiLCJmcmVlemUiLCJfX3Byb3RvX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js\n"));

/***/ })

}]);