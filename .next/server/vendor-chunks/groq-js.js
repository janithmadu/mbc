"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/groq-js";
exports.ids = ["vendor-chunks/groq-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/groq-js/dist/1.mjs":
/*!*****************************************!*\
  !*** ./node_modules/groq-js/dist/1.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   evaluate: () => (/* binding */ evaluateQuery),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\nvar __defProp$5 = Object.defineProperty;\nvar __defNormalProp$5 = (obj, key, value)=>key in obj ? __defProp$5(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$5 = (obj, key, value)=>{\n    __defNormalProp$5(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction pathRegExp(pattern) {\n    const re = [];\n    for (const part of pattern.split(\".\")){\n        if (part === \"*\") {\n            re.push(\"[^.]+\");\n        } else if (part === \"**\") {\n            re.push(\".*\");\n        } else {\n            re.push(escapeRegExp(part));\n        }\n    }\n    return new RegExp(\"^\".concat(re.join(\".\"), \"$\"));\n}\nclass Path {\n    constructor(pattern){\n        __publicField$5(this, \"pattern\");\n        __publicField$5(this, \"patternRe\");\n        this.pattern = pattern;\n        this.patternRe = pathRegExp(pattern);\n    }\n    matches(str) {\n        return this.patternRe.test(str);\n    }\n    toJSON() {\n        return this.pattern;\n    }\n}\nvar __defProp$4 = Object.defineProperty;\nvar __defNormalProp$4 = (obj, key, value)=>key in obj ? __defProp$4(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$4 = (obj, key, value)=>{\n    __defNormalProp$4(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass StreamValue {\n    constructor(generator){\n        __publicField$4(this, \"type\", \"stream\");\n        __publicField$4(this, \"generator\");\n        __publicField$4(this, \"ticker\");\n        __publicField$4(this, \"isDone\");\n        __publicField$4(this, \"data\");\n        this.generator = generator;\n        this.ticker = null;\n        this.isDone = false;\n        this.data = [];\n    }\n    // eslint-disable-next-line class-methods-use-this\n    isArray() {\n        return true;\n    }\n    async get() {\n        const result = [];\n        for await (const value of this){\n            result.push(await value.get());\n        }\n        return result;\n    }\n    async *[Symbol.asyncIterator]() {\n        let i = 0;\n        while(true){\n            for(; i < this.data.length; i++){\n                yield this.data[i];\n            }\n            if (this.isDone) {\n                return;\n            }\n            await this._nextTick();\n        }\n    }\n    _nextTick() {\n        if (this.ticker) {\n            return this.ticker;\n        }\n        let currentResolver;\n        const setupTicker = ()=>{\n            this.ticker = new Promise((resolve)=>{\n                currentResolver = resolve;\n            });\n        };\n        const tick = ()=>{\n            currentResolver();\n            setupTicker();\n        };\n        const fetch = async ()=>{\n            for await (const value of this.generator()){\n                this.data.push(value);\n                tick();\n            }\n            this.isDone = true;\n            tick();\n        };\n        setupTicker();\n        fetch();\n        return this.ticker;\n    }\n}\nconst RFC3339_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([-+]\\d{2}:\\d{2}))$/;\nfunction parseRFC3339(str) {\n    if (RFC3339_REGEX.test(str)) {\n        return new Date(str);\n    }\n    return null;\n}\nfunction formatRFC3339(d) {\n    const year = addLeadingZero(d.getUTCFullYear(), 4);\n    const month = addLeadingZero(d.getUTCMonth() + 1, 2);\n    const day = addLeadingZero(d.getUTCDate(), 2);\n    const hour = addLeadingZero(d.getUTCHours(), 2);\n    const minute = addLeadingZero(d.getUTCMinutes(), 2);\n    const second = addLeadingZero(d.getUTCSeconds(), 2);\n    let fractionalSecond = \"\";\n    const millis = d.getMilliseconds();\n    if (millis != 0) {\n        fractionalSecond = \".\".concat(addLeadingZero(millis, 3));\n    }\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond, \"Z\");\n}\nfunction addLeadingZero(num, targetLength) {\n    let str = num.toString();\n    while(str.length < targetLength){\n        str = \"0\".concat(str);\n    }\n    return str;\n}\nvar __defProp$3 = Object.defineProperty;\nvar __defNormalProp$3 = (obj, key, value)=>key in obj ? __defProp$3(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$3 = (obj, key, value)=>{\n    __defNormalProp$3(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass StaticValue {\n    constructor(data, type){\n        __publicField$3(this, \"data\");\n        __publicField$3(this, \"type\");\n        this.data = data;\n        this.type = type;\n    }\n    isArray() {\n        return this.type === \"array\";\n    }\n    // eslint-disable-next-line require-await\n    async get() {\n        return this.data;\n    }\n    [Symbol.asyncIterator]() {\n        if (Array.isArray(this.data)) {\n            return function*(data) {\n                for (const element of data){\n                    yield fromJS(element);\n                }\n            }(this.data);\n        }\n        throw new Error(\"Cannot iterate over: \".concat(this.type));\n    }\n}\nconst NULL_VALUE = new StaticValue(null, \"null\");\nconst TRUE_VALUE = new StaticValue(true, \"boolean\");\nconst FALSE_VALUE = new StaticValue(false, \"boolean\");\nclass DateTime {\n    constructor(date){\n        __publicField$3(this, \"date\");\n        this.date = date;\n    }\n    static parseToValue(str) {\n        const date = parseRFC3339(str);\n        if (date) {\n            return new StaticValue(new DateTime(date), \"datetime\");\n        }\n        return NULL_VALUE;\n    }\n    equals(other) {\n        return this.date.getTime() == other.date.getTime();\n    }\n    add(secs) {\n        const copy = new Date(this.date.getTime());\n        copy.setTime(copy.getTime() + secs * 1e3);\n        return new DateTime(copy);\n    }\n    difference(other) {\n        return (this.date.getTime() - other.date.getTime()) / 1e3;\n    }\n    compareTo(other) {\n        return this.date.getTime() - other.date.getTime();\n    }\n    toString() {\n        return formatRFC3339(this.date);\n    }\n    toJSON() {\n        return this.toString();\n    }\n}\nfunction fromNumber(num) {\n    if (Number.isFinite(num)) {\n        return new StaticValue(num, \"number\");\n    }\n    return NULL_VALUE;\n}\nfunction fromString(str) {\n    return new StaticValue(str, \"string\");\n}\nfunction fromDateTime(dt) {\n    return new StaticValue(dt, \"datetime\");\n}\nfunction fromPath(path) {\n    return new StaticValue(path, \"path\");\n}\nfunction isIterator(obj) {\n    return obj && typeof obj.next === \"function\";\n}\nfunction fromJS(val) {\n    if (isIterator(val)) {\n        return new StreamValue(async function*() {\n            for await (const value of val){\n                yield fromJS(value);\n            }\n        });\n    } else if (val === null || val === void 0) {\n        return NULL_VALUE;\n    }\n    return new StaticValue(val, getType(val));\n}\nfunction getType(data) {\n    if (data === null || typeof data === \"undefined\") {\n        return \"null\";\n    }\n    if (Array.isArray(data)) {\n        return \"array\";\n    }\n    if (data instanceof Path) {\n        return \"path\";\n    }\n    if (data instanceof DateTime) {\n        return \"datetime\";\n    }\n    return typeof data;\n}\nfunction isEqual(a, b) {\n    if (a.type === \"string\" && b.type === \"string\" || a.type === \"boolean\" && b.type === \"boolean\" || a.type === \"null\" && b.type === \"null\" || a.type === \"number\" && b.type === \"number\") {\n        return a.data === b.data;\n    }\n    if (a.type === \"datetime\" && b.type === \"datetime\") {\n        return a.data.equals(b.data);\n    }\n    return false;\n}\nconst CHARS = /([^!@#$%^&*(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\nconst CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\nconst EDGE_CHARS = /(\\b\\.+|\\.+\\b)/g;\nconst MAX_TERM_LENGTH = 1024;\nfunction matchText(tokens, patterns) {\n    if (tokens.length === 0 || patterns.length === 0) {\n        return false;\n    }\n    return patterns.every((pattern)=>pattern(tokens));\n}\nfunction matchTokenize(text) {\n    return text.replace(EDGE_CHARS, \"\").match(CHARS) || [];\n}\nfunction matchAnalyzePattern(text) {\n    const termsRe = matchPatternRegex(text);\n    return termsRe.map((re)=>(tokens)=>tokens.some((token)=>re.test(token)));\n}\nfunction matchPatternRegex(text) {\n    const terms = text.replace(EDGE_CHARS, \"\").match(CHARS_WITH_WILDCARD) || [];\n    return terms.map((term)=>new RegExp(\"^\".concat(term.slice(0, MAX_TERM_LENGTH).replace(/\\*/g, \".*\"), \"$\"), \"i\"));\n}\nasync function gatherText(value, cb) {\n    if (value.type === \"string\") {\n        cb(value.data);\n        return true;\n    }\n    if (value.isArray()) {\n        let success = true;\n        for await (const part of value){\n            if (part.type === \"string\") {\n                cb(part.data);\n            } else {\n                success = false;\n            }\n        }\n        return success;\n    }\n    return false;\n}\nconst TYPE_ORDER = {\n    datetime: 1,\n    number: 2,\n    string: 3,\n    boolean: 4\n};\nfunction partialCompare(a, b) {\n    const aType = getType(a);\n    const bType = getType(b);\n    if (aType !== bType) {\n        return null;\n    }\n    switch(aType){\n        case \"number\":\n        case \"boolean\":\n            return a - b;\n        case \"string\":\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0;\n        case \"datetime\":\n            return a.compareTo(b);\n        default:\n            return null;\n    }\n}\nfunction totalCompare(a, b) {\n    const aType = getType(a);\n    const bType = getType(b);\n    const aTypeOrder = TYPE_ORDER[aType] || 100;\n    const bTypeOrder = TYPE_ORDER[bType] || 100;\n    if (aTypeOrder !== bTypeOrder) {\n        return aTypeOrder - bTypeOrder;\n    }\n    let result = partialCompare(a, b);\n    if (result === null) {\n        result = 0;\n    }\n    return result;\n}\nconst operators = {\n    \"==\": function eq(left, right) {\n        return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;\n    },\n    \"!=\": function neq(left, right) {\n        return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;\n    },\n    \">\": function gt(left, right) {\n        if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n        const result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result > 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    \">=\": function gte(left, right) {\n        if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n        const result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result >= 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    \"<\": function lt(left, right) {\n        if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n        const result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result < 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    \"<=\": function lte(left, right) {\n        if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n        const result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result <= 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    // eslint-disable-next-line func-name-matching\n    in: async function inop(left, right) {\n        if (right.type === \"path\") {\n            if (left.type !== \"string\") {\n                return NULL_VALUE;\n            }\n            return right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;\n        }\n        if (right.isArray()) {\n            for await (const b of right){\n                if (isEqual(left, b)) {\n                    return TRUE_VALUE;\n                }\n            }\n            return FALSE_VALUE;\n        }\n        return NULL_VALUE;\n    },\n    match: async function match(left, right) {\n        let tokens = [];\n        let patterns = [];\n        await gatherText(left, (part)=>{\n            tokens = tokens.concat(matchTokenize(part));\n        });\n        const didSucceed = await gatherText(right, (part)=>{\n            patterns = patterns.concat(matchAnalyzePattern(part));\n        });\n        if (!didSucceed) {\n            return FALSE_VALUE;\n        }\n        const matched = matchText(tokens, patterns);\n        return matched ? TRUE_VALUE : FALSE_VALUE;\n    },\n    \"+\": function plus(left, right) {\n        if (left.type === \"datetime\" && right.type === \"number\") {\n            return fromDateTime(left.data.add(right.data));\n        }\n        if (left.type === \"number\" && right.type === \"number\") {\n            return fromNumber(left.data + right.data);\n        }\n        if (left.type === \"string\" && right.type === \"string\") {\n            return fromString(left.data + right.data);\n        }\n        if (left.type === \"object\" && right.type === \"object\") {\n            return fromJS({\n                ...left.data,\n                ...right.data\n            });\n        }\n        if (left.type === \"array\" && right.type === \"array\") {\n            return fromJS(left.data.concat(right.data));\n        }\n        if (left.isArray() && right.isArray()) {\n            return new StreamValue(async function*() {\n                for await (const val of left){\n                    yield val;\n                }\n                for await (const val of right){\n                    yield val;\n                }\n            });\n        }\n        return NULL_VALUE;\n    },\n    \"-\": function minus(left, right) {\n        if (left.type === \"datetime\" && right.type === \"number\") {\n            return fromDateTime(left.data.add(-right.data));\n        }\n        if (left.type === \"datetime\" && right.type === \"datetime\") {\n            return fromNumber(left.data.difference(right.data));\n        }\n        if (left.type === \"number\" && right.type === \"number\") {\n            return fromNumber(left.data - right.data);\n        }\n        return NULL_VALUE;\n    },\n    \"*\": numericOperator((a, b)=>a * b),\n    \"/\": numericOperator((a, b)=>a / b),\n    \"%\": numericOperator((a, b)=>a % b),\n    \"**\": numericOperator((a, b)=>Math.pow(a, b))\n};\nfunction numericOperator(impl) {\n    return function(left, right) {\n        if (left.type === \"number\" && right.type === \"number\") {\n            const result = impl(left.data, right.data);\n            return fromNumber(result);\n        }\n        return NULL_VALUE;\n    };\n}\nvar __defProp$2 = Object.defineProperty;\nvar __defNormalProp$2 = (obj, key, value)=>key in obj ? __defProp$2(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$2 = (obj, key, value)=>{\n    __defNormalProp$2(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass Scope {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(params, source, value, context, parent){\n        __publicField$2(this, \"params\");\n        __publicField$2(this, \"source\");\n        __publicField$2(this, \"value\");\n        __publicField$2(this, \"parent\");\n        __publicField$2(this, \"context\");\n        __publicField$2(this, \"isHidden\", false);\n        this.params = params;\n        this.source = source;\n        this.value = value;\n        this.context = context;\n        this.parent = parent;\n    }\n    createNested(value) {\n        if (this.isHidden) {\n            return new Scope(this.params, this.source, value, this.context, this.parent);\n        }\n        return new Scope(this.params, this.source, value, this.context, this);\n    }\n    createHidden(value) {\n        const result = this.createNested(value);\n        result.isHidden = true;\n        return result;\n    }\n}\nfunction evaluate(node, scope, execute = evaluate) {\n    const func = EXECUTORS[node.type];\n    return func(node, scope, execute);\n}\nfunction promiselessApply(value, cb) {\n    if (\"then\" in value) {\n        return value.then(cb);\n    }\n    return cb(value);\n}\nconst EXECUTORS = {\n    This (_, scope) {\n        return scope.value;\n    },\n    Selector () {\n        throw new Error(\"Selectors can not be evaluated\");\n    },\n    Everything (_, scope) {\n        return scope.source;\n    },\n    Parameter ({ name }, scope) {\n        return fromJS(scope.params[name]);\n    },\n    Context ({ key }, scope) {\n        if (key === \"before\" || key === \"after\") {\n            const value = scope.context[key];\n            return value || NULL_VALUE;\n        }\n        throw new Error(\"unknown context key: \".concat(key));\n    },\n    Parent ({ n }, scope) {\n        let current = scope;\n        for(let i = 0; i < n; i++){\n            if (!current.parent) {\n                return NULL_VALUE;\n            }\n            current = current.parent;\n        }\n        return current.value;\n    },\n    OpCall ({ op, left, right }, scope, execute) {\n        const func = operators[op];\n        if (!func) {\n            throw new Error(\"Unknown operator: \".concat(op));\n        }\n        const leftValue = execute(left, scope);\n        const rightValue = execute(right, scope);\n        if (\"then\" in leftValue || \"then\" in rightValue) {\n            return (async ()=>func(await leftValue, await rightValue))();\n        }\n        return func(leftValue, rightValue);\n    },\n    async Select ({ alternatives, fallback }, scope, execute) {\n        for (const alt of alternatives){\n            const altCond = await execute(alt.condition, scope);\n            if (altCond.type === \"boolean\" && altCond.data === true) {\n                return execute(alt.value, scope);\n            }\n        }\n        if (fallback) {\n            return execute(fallback, scope);\n        }\n        return NULL_VALUE;\n    },\n    async InRange ({ base, left, right, isInclusive }, scope, execute) {\n        const value = await execute(base, scope);\n        const leftValue = await execute(left, scope);\n        const rightValue = await execute(right, scope);\n        const leftCmp = partialCompare(await value.get(), await leftValue.get());\n        if (leftCmp === null) {\n            return NULL_VALUE;\n        }\n        const rightCmp = partialCompare(await value.get(), await rightValue.get());\n        if (rightCmp === null) {\n            return NULL_VALUE;\n        }\n        if (isInclusive) {\n            return leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE;\n        }\n        return leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    async Filter ({ base, expr }, scope, execute) {\n        const baseValue = await execute(base, scope);\n        if (!baseValue.isArray()) {\n            return NULL_VALUE;\n        }\n        return new StreamValue(async function*() {\n            for await (const elem of baseValue){\n                const newScope = scope.createNested(elem);\n                const exprValue = await execute(expr, newScope);\n                if (exprValue.type === \"boolean\" && exprValue.data === true) {\n                    yield elem;\n                }\n            }\n        });\n    },\n    async Projection ({ base, expr }, scope, execute) {\n        const baseValue = await execute(base, scope);\n        if (baseValue.type !== \"object\") {\n            return NULL_VALUE;\n        }\n        const newScope = scope.createNested(baseValue);\n        return execute(expr, newScope);\n    },\n    FuncCall ({ func, args }, scope, execute) {\n        return func(args, scope, execute);\n    },\n    async PipeFuncCall ({ func, base, args }, scope, execute) {\n        const baseValue = await execute(base, scope);\n        return func(baseValue, args, scope, execute);\n    },\n    async AccessAttribute ({ base, name }, scope, execute) {\n        let value = scope.value;\n        if (base) {\n            value = await execute(base, scope);\n        }\n        if (value.type === \"object\") {\n            if (value.data.hasOwnProperty(name)) {\n                return fromJS(value.data[name]);\n            }\n        }\n        return NULL_VALUE;\n    },\n    async AccessElement ({ base, index }, scope, execute) {\n        const baseValue = await execute(base, scope);\n        if (!baseValue.isArray()) {\n            return NULL_VALUE;\n        }\n        const data = await baseValue.get();\n        const finalIndex = index < 0 ? index + data.length : index;\n        return fromJS(data[finalIndex]);\n    },\n    async Slice ({ base, left, right, isInclusive }, scope, execute) {\n        const baseValue = await execute(base, scope);\n        if (!baseValue.isArray()) {\n            return NULL_VALUE;\n        }\n        const array = await baseValue.get();\n        let leftIdx = left;\n        let rightIdx = right;\n        if (leftIdx < 0) {\n            leftIdx = array.length + leftIdx;\n        }\n        if (rightIdx < 0) {\n            rightIdx = array.length + rightIdx;\n        }\n        if (isInclusive) {\n            rightIdx++;\n        }\n        if (leftIdx < 0) {\n            leftIdx = 0;\n        }\n        if (rightIdx < 0) {\n            rightIdx = 0;\n        }\n        return fromJS(array.slice(leftIdx, rightIdx));\n    },\n    async Deref ({ base }, scope, execute) {\n        const value = await execute(base, scope);\n        if (!scope.source.isArray()) {\n            return NULL_VALUE;\n        }\n        if (value.type !== \"object\") {\n            return NULL_VALUE;\n        }\n        const id = value.data._ref;\n        if (typeof id !== \"string\") {\n            return NULL_VALUE;\n        }\n        if (scope.context.dereference) {\n            return fromJS(await scope.context.dereference({\n                _ref: id\n            }));\n        }\n        for await (const doc of scope.source){\n            if (doc.type === \"object\" && id === doc.data._id) {\n                return doc;\n            }\n        }\n        return NULL_VALUE;\n    },\n    Value ({ value }) {\n        return fromJS(value);\n    },\n    Group ({ base }, scope, execute) {\n        return execute(base, scope);\n    },\n    async Object ({ attributes }, scope, execute) {\n        const result = {};\n        for (const attr of attributes){\n            const attrType = attr.type;\n            switch(attr.type){\n                case \"ObjectAttributeValue\":\n                    {\n                        const value = await execute(attr.value, scope);\n                        result[attr.name] = await value.get();\n                        break;\n                    }\n                case \"ObjectConditionalSplat\":\n                    {\n                        const cond = await execute(attr.condition, scope);\n                        if (cond.type !== \"boolean\" || cond.data === false) {\n                            continue;\n                        }\n                        const value = await execute(attr.value, scope);\n                        if (value.type === \"object\") {\n                            Object.assign(result, value.data);\n                        }\n                        break;\n                    }\n                case \"ObjectSplat\":\n                    {\n                        const value = await execute(attr.value, scope);\n                        if (value.type === \"object\") {\n                            Object.assign(result, value.data);\n                        }\n                        break;\n                    }\n                default:\n                    throw new Error(\"Unknown node type: \".concat(attrType));\n            }\n        }\n        return fromJS(result);\n    },\n    Array ({ elements }, scope, execute) {\n        return new StreamValue(async function*() {\n            for (const element of elements){\n                const value = await execute(element.value, scope);\n                if (element.isSplat) {\n                    if (value.isArray()) {\n                        for await (const v of value){\n                            yield v;\n                        }\n                    }\n                } else {\n                    yield value;\n                }\n            }\n        });\n    },\n    Tuple () {\n        throw new Error(\"tuples can not be evaluated\");\n    },\n    async Or ({ left, right }, scope, execute) {\n        const leftValue = await execute(left, scope);\n        const rightValue = await execute(right, scope);\n        if (leftValue.type === \"boolean\") {\n            if (leftValue.data === true) {\n                return TRUE_VALUE;\n            }\n        }\n        if (rightValue.type === \"boolean\") {\n            if (rightValue.data === true) {\n                return TRUE_VALUE;\n            }\n        }\n        if (leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\") {\n            return NULL_VALUE;\n        }\n        return FALSE_VALUE;\n    },\n    async And ({ left, right }, scope, execute) {\n        const leftValue = await execute(left, scope);\n        const rightValue = await execute(right, scope);\n        if (leftValue.type === \"boolean\") {\n            if (leftValue.data === false) {\n                return FALSE_VALUE;\n            }\n        }\n        if (rightValue.type === \"boolean\") {\n            if (rightValue.data === false) {\n                return FALSE_VALUE;\n            }\n        }\n        if (leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\") {\n            return NULL_VALUE;\n        }\n        return TRUE_VALUE;\n    },\n    async Not ({ base }, scope, execute) {\n        const value = await execute(base, scope);\n        if (value.type !== \"boolean\") {\n            return NULL_VALUE;\n        }\n        return value.data ? FALSE_VALUE : TRUE_VALUE;\n    },\n    Neg ({ base }, scope, execute) {\n        return promiselessApply(execute(base, scope), (value)=>{\n            if (value.type !== \"number\") {\n                return NULL_VALUE;\n            }\n            return fromNumber(-value.data);\n        });\n    },\n    Pos ({ base }, scope, execute) {\n        return promiselessApply(execute(base, scope), (value)=>{\n            if (value.type !== \"number\") {\n                return NULL_VALUE;\n            }\n            return fromNumber(value.data);\n        });\n    },\n    Asc () {\n        return NULL_VALUE;\n    },\n    Desc () {\n        return NULL_VALUE;\n    },\n    async ArrayCoerce ({ base }, scope, execute) {\n        const value = await execute(base, scope);\n        return value.isArray() ? value : NULL_VALUE;\n    },\n    async Map ({ base, expr }, scope, execute) {\n        const value = await execute(base, scope);\n        if (!value.isArray()) {\n            return NULL_VALUE;\n        }\n        return new StreamValue(async function*() {\n            for await (const elem of value){\n                const newScope = scope.createHidden(elem);\n                yield await execute(expr, newScope);\n            }\n        });\n    },\n    async FlatMap ({ base, expr }, scope, execute) {\n        const value = await execute(base, scope);\n        if (!value.isArray()) {\n            return NULL_VALUE;\n        }\n        return new StreamValue(async function*() {\n            for await (const elem of value){\n                const newScope = scope.createHidden(elem);\n                const innerValue = await execute(expr, newScope);\n                if (innerValue.isArray()) {\n                    for await (const inner of innerValue){\n                        yield inner;\n                    }\n                } else {\n                    yield innerValue;\n                }\n            }\n        });\n    }\n};\nfunction evaluateQuery(tree, options = {}) {\n    const root = fromJS(options.root);\n    const dataset = fromJS(options.dataset);\n    const params = {\n        ...options.params\n    };\n    const scope = new Scope(params, dataset, root, {\n        timestamp: options.timestamp || /* @__PURE__ */ new Date(),\n        identity: options.identity === void 0 ? \"me\" : options.identity,\n        sanity: options.sanity,\n        after: options.after ? fromJS(options.after) : null,\n        before: options.before ? fromJS(options.before) : null,\n        dereference: options.dereference\n    }, null);\n    return evaluate(tree, scope);\n}\nfunction canConstantEvaluate(node) {\n    switch(node.type){\n        case \"Group\":\n            return canConstantEvaluate(node.base);\n        case \"Value\":\n        case \"Parameter\":\n            return true;\n        case \"Pos\":\n        case \"Neg\":\n            return canConstantEvaluate(node.base);\n        case \"OpCall\":\n            switch(node.op){\n                case \"+\":\n                case \"-\":\n                case \"*\":\n                case \"/\":\n                case \"%\":\n                case \"**\":\n                    return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);\n                default:\n                    return false;\n            }\n        default:\n            return false;\n    }\n}\nconst DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, {\n    timestamp: /* @__PURE__ */ new Date(0),\n    identity: \"me\",\n    before: null,\n    after: null\n}, null);\nfunction tryConstantEvaluate(node) {\n    if (!canConstantEvaluate(node)) {\n        return null;\n    }\n    return constantEvaluate(node);\n}\nfunction constantEvaluate(node) {\n    const value = evaluate(node, DUMMY_SCOPE, constantEvaluate);\n    if (\"then\" in value) {\n        throw new Error(\"BUG: constant evaluate should never return a promise\");\n    }\n    return value;\n}\nasync function portableTextContent(value) {\n    if (value.type === \"object\") {\n        return blockText(value.data);\n    } else if (value.isArray()) {\n        const texts = await arrayText(value);\n        if (texts.length > 0) {\n            return texts.join(\"\\n\\n\");\n        }\n    }\n    return null;\n}\nasync function arrayText(value, result = []) {\n    for await (const block of value){\n        if (block.type === \"object\") {\n            const text = blockText(block.data);\n            if (text !== null) result.push(text);\n        } else if (block.isArray()) {\n            await arrayText(block, result);\n        }\n    }\n    return result;\n}\nfunction blockText(obj) {\n    if (typeof obj._type !== \"string\") return null;\n    const children = obj.children;\n    if (!Array.isArray(children)) return null;\n    let result = \"\";\n    for (const child of children){\n        if (child && typeof child === \"object\" && typeof child._type === \"string\" && child._type === \"span\" && typeof child.text === \"string\") {\n            result += child.text;\n        }\n    }\n    return result;\n}\nconst BM25k = 1.2;\nasync function evaluateScore(node, scope, execute) {\n    if (node.type === \"OpCall\" && node.op === \"match\") {\n        return evaluateMatchScore(node.left, node.right, scope, execute);\n    }\n    if (node.type === \"FuncCall\" && node.name === \"boost\") {\n        const innerScore = await evaluateScore(node.args[0], scope, execute);\n        const boost = await execute(node.args[1], scope);\n        if (boost.type === \"number\" && innerScore > 0) {\n            return innerScore + boost.data;\n        }\n        return 0;\n    }\n    switch(node.type){\n        case \"Or\":\n            {\n                const leftScore = await evaluateScore(node.left, scope, execute);\n                const rightScore = await evaluateScore(node.right, scope, execute);\n                return leftScore + rightScore;\n            }\n        case \"And\":\n            {\n                const leftScore = await evaluateScore(node.left, scope, execute);\n                const rightScore = await evaluateScore(node.right, scope, execute);\n                if (leftScore === 0 || rightScore === 0) return 0;\n                return leftScore + rightScore;\n            }\n        default:\n            {\n                const res = await execute(node, scope);\n                return res.type === \"boolean\" && res.data === true ? 1 : 0;\n            }\n    }\n}\nasync function evaluateMatchScore(left, right, scope, execute) {\n    const text = await execute(left, scope);\n    const pattern = await execute(right, scope);\n    let tokens = [];\n    let terms = [];\n    await gatherText(text, (part)=>{\n        tokens = tokens.concat(matchTokenize(part));\n    });\n    const didSucceed = await gatherText(pattern, (part)=>{\n        terms = terms.concat(matchPatternRegex(part));\n    });\n    if (!didSucceed) {\n        return 0;\n    }\n    if (tokens.length === 0 || terms.length === 0) {\n        return 0;\n    }\n    let score = 0;\n    for (const re of terms){\n        const freq = tokens.reduce((c, token)=>c + (re.test(token) ? 1 : 0), 0);\n        score += freq * (BM25k + 1) / (freq + BM25k);\n    }\n    return score;\n}\nfunction hasReference(value, pathSet) {\n    switch(getType(value)){\n        case \"array\":\n            for (const v of value){\n                if (hasReference(v, pathSet)) {\n                    return true;\n                }\n            }\n            break;\n        case \"object\":\n            if (value._ref) {\n                return pathSet.has(value._ref);\n            }\n            for (const v of Object.values(value)){\n                if (hasReference(v, pathSet)) {\n                    return true;\n                }\n            }\n            break;\n    }\n    return false;\n}\nfunction countUTF8(str) {\n    let count2 = 0;\n    for(let i = 0; i < str.length; i++){\n        const code = str.charCodeAt(i);\n        if (code >= 55296 && code <= 56319) {\n            continue;\n        }\n        count2++;\n    }\n    return count2;\n}\nconst _global = {};\n_global.anywhere = async function anywhere() {\n    throw new Error(\"not implemented\");\n};\n_global.anywhere.arity = 1;\n_global.coalesce = async function coalesce(args, scope, execute) {\n    for (const arg of args){\n        const value = await execute(arg, scope);\n        if (value.type !== \"null\") {\n            return value;\n        }\n    }\n    return NULL_VALUE;\n};\n_global.count = async function count(args, scope, execute) {\n    const inner = await execute(args[0], scope);\n    if (!inner.isArray()) {\n        return NULL_VALUE;\n    }\n    let num = 0;\n    for await (const _ of inner){\n        num++;\n    }\n    return fromNumber(num);\n};\n_global.count.arity = 1;\n_global.dateTime = async function dateTime(args, scope, execute) {\n    const val = await execute(args[0], scope);\n    if (val.type === \"datetime\") {\n        return val;\n    }\n    if (val.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    return DateTime.parseToValue(val.data);\n};\n_global.dateTime.arity = 1;\n_global.defined = async function defined(args, scope, execute) {\n    const inner = await execute(args[0], scope);\n    return inner.type === \"null\" ? FALSE_VALUE : TRUE_VALUE;\n};\n_global.defined.arity = 1;\n_global.identity = async function identity(args, scope) {\n    return fromString(scope.context.identity);\n};\n_global.identity.arity = 0;\n_global.length = async function length(args, scope, execute) {\n    const inner = await execute(args[0], scope);\n    if (inner.type === \"string\") {\n        return fromNumber(countUTF8(inner.data));\n    }\n    if (inner.isArray()) {\n        let num = 0;\n        for await (const _ of inner){\n            num++;\n        }\n        return fromNumber(num);\n    }\n    return NULL_VALUE;\n};\n_global.length.arity = 1;\n_global.path = async function path(args, scope, execute) {\n    const inner = await execute(args[0], scope);\n    if (inner.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    return fromPath(new Path(inner.data));\n};\n_global.path.arity = 1;\n_global.string = async function string(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    switch(value.type){\n        case \"number\":\n        case \"string\":\n        case \"boolean\":\n        case \"datetime\":\n            return fromString(\"\".concat(value.data));\n        default:\n            return NULL_VALUE;\n    }\n};\n_global.string.arity = 1;\n_global.references = async function references(args, scope, execute) {\n    const pathSet = /* @__PURE__ */ new Set();\n    for (const arg of args){\n        const path2 = await execute(arg, scope);\n        if (path2.type === \"string\") {\n            pathSet.add(path2.data);\n        } else if (path2.isArray()) {\n            for await (const elem of path2){\n                if (elem.type === \"string\") {\n                    pathSet.add(elem.data);\n                }\n            }\n        }\n    }\n    if (pathSet.size === 0) {\n        return FALSE_VALUE;\n    }\n    const scopeValue = await scope.value.get();\n    return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;\n};\n_global.references.arity = (c)=>c >= 1;\n_global.round = async function round(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    if (value.type !== \"number\") {\n        return NULL_VALUE;\n    }\n    const num = value.data;\n    let prec = 0;\n    if (args.length === 2) {\n        const precValue = await execute(args[1], scope);\n        if (precValue.type !== \"number\" || precValue.data < 0 || !Number.isInteger(precValue.data)) {\n            return NULL_VALUE;\n        }\n        prec = precValue.data;\n    }\n    if (prec === 0) {\n        if (num < 0) {\n            return fromNumber(-Math.round(-num));\n        }\n        return fromNumber(Math.round(num));\n    }\n    return fromNumber(Number(num.toFixed(prec)));\n};\n_global.round.arity = (count2)=>count2 >= 1 && count2 <= 2;\n_global.now = async function now(args, scope) {\n    return fromString(scope.context.timestamp.toISOString());\n};\n_global.now.arity = 0;\n_global.boost = async function boost() {\n    throw new Error(\"unexpected boost call\");\n};\n_global.boost.arity = 2;\nconst string2 = {};\nstring2.lower = async function(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    if (value.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    return fromString(value.data.toLowerCase());\n};\nstring2.lower.arity = 1;\nstring2.upper = async function(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    if (value.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    return fromString(value.data.toUpperCase());\n};\nstring2.upper.arity = 1;\nstring2.split = async function(args, scope, execute) {\n    const str = await execute(args[0], scope);\n    if (str.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    const sep = await execute(args[1], scope);\n    if (sep.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    if (str.data.length === 0) {\n        return fromJS([]);\n    }\n    if (sep.data.length === 0) {\n        return fromJS(Array.from(str.data));\n    }\n    return fromJS(str.data.split(sep.data));\n};\nstring2.split.arity = 2;\n_global.lower = string2.lower;\n_global.upper = string2.upper;\nstring2.startsWith = async function(args, scope, execute) {\n    const str = await execute(args[0], scope);\n    if (str.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    const prefix = await execute(args[1], scope);\n    if (prefix.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    return str.data.startsWith(prefix.data) ? TRUE_VALUE : FALSE_VALUE;\n};\nstring2.startsWith.arity = 2;\nconst array = {};\narray.join = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    const sep = await execute(args[1], scope);\n    if (sep.type !== \"string\") {\n        return NULL_VALUE;\n    }\n    let buf = \"\";\n    let needSep = false;\n    for await (const elem of arr){\n        if (needSep) {\n            buf += sep.data;\n        }\n        switch(elem.type){\n            case \"number\":\n            case \"string\":\n            case \"boolean\":\n            case \"datetime\":\n                buf += \"\".concat(elem.data);\n                break;\n            default:\n                return NULL_VALUE;\n        }\n        needSep = true;\n    }\n    return fromJS(buf);\n};\narray.join.arity = 2;\narray.compact = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    return new StreamValue(async function*() {\n        for await (const elem of arr){\n            if (elem.type !== \"null\") {\n                yield elem;\n            }\n        }\n    });\n};\narray.compact.arity = 1;\narray.unique = async function(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    if (!value.isArray()) {\n        return NULL_VALUE;\n    }\n    return new StreamValue(async function*() {\n        const added = /* @__PURE__ */ new Set();\n        for await (const iter of value){\n            switch(iter.type){\n                case \"number\":\n                case \"string\":\n                case \"boolean\":\n                case \"datetime\":\n                    if (!added.has(iter.data)) {\n                        added.add(iter.data);\n                        yield iter;\n                    }\n                    break;\n                default:\n                    yield iter;\n            }\n        }\n    });\n};\narray.unique.arity = 1;\nconst pt = {};\npt.text = async function(args, scope, execute) {\n    const value = await execute(args[0], scope);\n    const text = await portableTextContent(value);\n    if (text === null) {\n        return NULL_VALUE;\n    }\n    return fromString(text);\n};\npt.text.arity = 1;\nconst sanity = {};\nsanity.projectId = async function(args, scope) {\n    if (scope.context.sanity) {\n        return fromString(scope.context.sanity.projectId);\n    }\n    return NULL_VALUE;\n};\nsanity.dataset = async function(args, scope) {\n    if (scope.context.sanity) {\n        return fromString(scope.context.sanity.dataset);\n    }\n    return NULL_VALUE;\n};\nconst pipeFunctions = {};\npipeFunctions.order = async function order(base, args, scope, execute) {\n    await true;\n    if (!base.isArray()) {\n        return NULL_VALUE;\n    }\n    const mappers = [];\n    const directions = [];\n    let n = 0;\n    for (let mapper of args){\n        let direction = \"asc\";\n        if (mapper.type === \"Desc\") {\n            direction = \"desc\";\n            mapper = mapper.base;\n        } else if (mapper.type === \"Asc\") {\n            mapper = mapper.base;\n        }\n        mappers.push(mapper);\n        directions.push(direction);\n        n++;\n    }\n    const aux = [];\n    let idx = 0;\n    for await (const value of base){\n        const newScope = scope.createNested(value);\n        const tuple = [\n            await value.get(),\n            idx\n        ];\n        for(let i = 0; i < n; i++){\n            const result = await execute(mappers[i], newScope);\n            tuple.push(await result.get());\n        }\n        aux.push(tuple);\n        idx++;\n    }\n    aux.sort((aTuple, bTuple)=>{\n        for(let i = 0; i < n; i++){\n            let c = totalCompare(aTuple[i + 2], bTuple[i + 2]);\n            if (directions[i] === \"desc\") {\n                c = -c;\n            }\n            if (c !== 0) {\n                return c;\n            }\n        }\n        return aTuple[1] - bTuple[1];\n    });\n    return fromJS(aux.map((v)=>v[0]));\n};\npipeFunctions.order.arity = (count2)=>count2 >= 1;\npipeFunctions.score = async function score(base, args, scope, execute) {\n    if (!base.isArray()) return NULL_VALUE;\n    const unknown = [];\n    const scored = [];\n    for await (const value of base){\n        if (value.type !== \"object\") {\n            unknown.push(await value.get());\n            continue;\n        }\n        const newScope = scope.createNested(value);\n        let valueScore = typeof value.data._score === \"number\" ? value.data._score : 0;\n        for (const arg of args){\n            valueScore += await evaluateScore(arg, newScope, execute);\n        }\n        const newObject = Object.assign({}, value.data, {\n            _score: valueScore\n        });\n        scored.push(newObject);\n    }\n    scored.sort((a, b)=>b._score - a._score);\n    return fromJS(scored);\n};\npipeFunctions.score.arity = (count2)=>count2 >= 1;\nconst delta = {};\ndelta.operation = async function(args, scope) {\n    const hasBefore = scope.context.before !== null;\n    const hasAfter = scope.context.after !== null;\n    if (hasBefore && hasAfter) {\n        return fromString(\"update\");\n    }\n    if (hasAfter) {\n        return fromString(\"create\");\n    }\n    if (hasBefore) {\n        return fromString(\"delete\");\n    }\n    return NULL_VALUE;\n};\ndelta.changedAny = ()=>{\n    throw new Error(\"not implemented\");\n};\ndelta.changedAny.arity = 1;\ndelta.changedAny.mode = \"delta\";\ndelta.changedOnly = ()=>{\n    throw new Error(\"not implemented\");\n};\ndelta.changedOnly.arity = 1;\ndelta.changedOnly.mode = \"delta\";\nconst diff = {};\ndiff.changedAny = ()=>{\n    throw new Error(\"not implemented\");\n};\ndiff.changedAny.arity = 3;\ndiff.changedOnly = ()=>{\n    throw new Error(\"not implemented\");\n};\ndiff.changedOnly.arity = 3;\nconst math = {};\nmath.min = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    let n;\n    for await (const elem of arr){\n        if (elem.type === \"null\") continue;\n        if (elem.type !== \"number\") {\n            return NULL_VALUE;\n        }\n        if (n === void 0 || elem.data < n) {\n            n = elem.data;\n        }\n    }\n    return fromJS(n);\n};\nmath.min.arity = 1;\nmath.max = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    let n;\n    for await (const elem of arr){\n        if (elem.type === \"null\") continue;\n        if (elem.type !== \"number\") {\n            return NULL_VALUE;\n        }\n        if (n === void 0 || elem.data > n) {\n            n = elem.data;\n        }\n    }\n    return fromJS(n);\n};\nmath.max.arity = 1;\nmath.sum = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    let n = 0;\n    for await (const elem of arr){\n        if (elem.type === \"null\") continue;\n        if (elem.type !== \"number\") {\n            return NULL_VALUE;\n        }\n        n += elem.data;\n    }\n    return fromJS(n);\n};\nmath.sum.arity = 1;\nmath.avg = async function(args, scope, execute) {\n    const arr = await execute(args[0], scope);\n    if (!arr.isArray()) {\n        return NULL_VALUE;\n    }\n    let n = 0;\n    let c = 0;\n    for await (const elem of arr){\n        if (elem.type === \"null\") continue;\n        if (elem.type !== \"number\") {\n            return NULL_VALUE;\n        }\n        n += elem.data;\n        c++;\n    }\n    if (c === 0) {\n        return NULL_VALUE;\n    }\n    return fromJS(n / c);\n};\nmath.avg.arity = 1;\nconst dateTime2 = {};\ndateTime2.now = async function now2(args, scope, execute) {\n    return fromDateTime(new DateTime(scope.context.timestamp));\n};\ndateTime2.now.arity = 0;\nconst namespaces = {\n    global: _global,\n    string: string2,\n    array,\n    pt,\n    delta,\n    diff,\n    sanity,\n    math,\n    dateTime: dateTime2\n};\nvar __defProp$1 = Object.defineProperty;\nvar __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$1 = (obj, key, value)=>{\n    __defNormalProp$1(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass MarkProcessor {\n    constructor(string, marks, parseOptions){\n        __publicField$1(this, \"string\");\n        __publicField$1(this, \"marks\");\n        __publicField$1(this, \"index\");\n        __publicField$1(this, \"parseOptions\");\n        __publicField$1(this, \"allowBoost\", false);\n        this.string = string;\n        this.marks = marks;\n        this.index = 0;\n        this.parseOptions = parseOptions;\n    }\n    hasMark(pos = 0) {\n        return this.index + pos < this.marks.length;\n    }\n    getMark(pos = 0) {\n        return this.marks[this.index + pos];\n    }\n    shift() {\n        this.index += 1;\n    }\n    process(visitor) {\n        const mark = this.marks[this.index];\n        this.shift();\n        const func = visitor[mark.name];\n        if (!func) {\n            throw new Error(\"Unknown handler: \".concat(mark.name));\n        }\n        return func.call(visitor, this, mark);\n    }\n    processString() {\n        this.shift();\n        return this.processStringEnd();\n    }\n    processStringEnd() {\n        const prev = this.marks[this.index - 1];\n        const curr = this.marks[this.index];\n        this.shift();\n        return this.string.slice(prev.position, curr.position);\n    }\n    slice(len) {\n        const pos = this.marks[this.index].position;\n        return this.string.slice(pos, pos + len);\n    }\n}\nconst WS = /^([\\t\\n\\v\\f\\r \\u0085\\u00A0]|(\\/\\/[^\\n]*\\n))+/;\nconst NUM = /^\\d+/;\nconst IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/;\nconst PREC_PAIR = 1;\nconst PREC_OR = 2;\nconst PREC_AND = 3;\nconst PREC_COMP = 4;\nconst PREC_ORDER = 4;\nconst PREC_ADD = 6;\nconst PREC_SUB = 6;\nconst PREC_MUL = 7;\nconst PREC_DIV = 7;\nconst PREC_MOD = 7;\nconst PREC_POW = 8;\nconst PREC_POS = 10;\nconst PREC_NOT = 10;\nconst PREC_NEG = 8;\nfunction parse$1(str) {\n    let pos = 0;\n    pos = skipWS(str, pos);\n    let result = parseExpr(str, pos, 0);\n    if (result.type === \"error\") return result;\n    pos = skipWS(str, result.position);\n    if (pos !== str.length) {\n        if (result.failPosition) {\n            pos = result.failPosition - 1;\n        }\n        return {\n            type: \"error\",\n            position: pos\n        };\n    }\n    delete result.position;\n    delete result.failPosition;\n    return result;\n}\nfunction parseExpr(str, pos, level) {\n    let startPos = pos;\n    let token = str[pos];\n    let marks;\n    switch(token){\n        case \"+\":\n            {\n                let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);\n                if (rhs.type === \"error\") return rhs;\n                marks = [\n                    {\n                        name: \"pos\",\n                        position: startPos\n                    }\n                ].concat(rhs.marks);\n                pos = rhs.position;\n                break;\n            }\n        case \"-\":\n            {\n                let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);\n                if (rhs.type === \"error\") return rhs;\n                marks = [\n                    {\n                        name: \"neg\",\n                        position: startPos\n                    }\n                ].concat(rhs.marks);\n                pos = rhs.position;\n                break;\n            }\n        case \"(\":\n            {\n                let rhs = parseExpr(str, skipWS(str, pos + 1), 0);\n                if (rhs.type === \"error\") return rhs;\n                pos = skipWS(str, rhs.position);\n                switch(str[pos]){\n                    case \",\":\n                        {\n                            marks = [\n                                {\n                                    name: \"tuple\",\n                                    position: startPos\n                                }\n                            ].concat(rhs.marks);\n                            pos = skipWS(str, pos + 1);\n                            while(true){\n                                rhs = parseExpr(str, pos, 0);\n                                if (rhs.type === \"error\") return rhs;\n                                pos = skipWS(str, rhs.position);\n                                if (str[pos] !== \",\") break;\n                                pos = skipWS(str, pos + 1);\n                            }\n                            if (str[pos] !== \")\") return {\n                                type: \"error\",\n                                position: pos\n                            };\n                            pos++;\n                            marks.push({\n                                name: \"tuple_end\",\n                                position: pos\n                            });\n                            break;\n                        }\n                    case \")\":\n                        {\n                            pos++;\n                            marks = [\n                                {\n                                    name: \"group\",\n                                    position: startPos\n                                }\n                            ].concat(rhs.marks);\n                            break;\n                        }\n                    default:\n                        return {\n                            type: \"error\",\n                            position: pos\n                        };\n                }\n                break;\n            }\n        case \"!\":\n            {\n                let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);\n                if (rhs.type === \"error\") return rhs;\n                marks = [\n                    {\n                        name: \"not\",\n                        position: startPos\n                    }\n                ].concat(rhs.marks);\n                pos = rhs.position;\n                break;\n            }\n        case \"{\":\n            {\n                let result = parseObject(str, pos);\n                if (result.type === \"error\") return result;\n                marks = result.marks;\n                pos = result.position;\n                break;\n            }\n        case \"[\":\n            marks = [\n                {\n                    name: \"array\",\n                    position: pos\n                }\n            ];\n            pos = skipWS(str, pos + 1);\n            if (str[pos] !== \"]\") {\n                while(true){\n                    if (str.slice(pos, pos + 3) === \"...\") {\n                        marks.push({\n                            name: \"array_splat\",\n                            position: pos\n                        });\n                        pos = skipWS(str, pos + 3);\n                    }\n                    let res = parseExpr(str, pos, 0);\n                    if (res.type === \"error\") return res;\n                    marks = marks.concat(res.marks);\n                    pos = res.position;\n                    pos = skipWS(str, pos);\n                    if (str[pos] !== \",\") break;\n                    pos = skipWS(str, pos + 1);\n                    if (str[pos] === \"]\") break;\n                }\n            }\n            if (str[pos] === \"]\") {\n                pos++;\n                marks.push({\n                    name: \"array_end\",\n                    position: pos\n                });\n            } else {\n                return {\n                    type: \"error\",\n                    position: pos\n                };\n            }\n            break;\n        case \"'\":\n        case '\"':\n            {\n                let result = parseString(str, pos);\n                if (result.type === \"error\") return result;\n                marks = result.marks;\n                pos = result.position;\n                break;\n            }\n        case \"^\":\n            {\n                pos++;\n                marks = [];\n                while(str[pos] === \".\" && str[pos + 1] === \"^\"){\n                    marks.push({\n                        name: \"dblparent\",\n                        position: startPos\n                    });\n                    pos += 2;\n                }\n                marks.push({\n                    name: \"parent\",\n                    position: startPos\n                });\n                break;\n            }\n        case \"@\":\n            marks = [\n                {\n                    name: \"this\",\n                    position: startPos\n                }\n            ];\n            pos++;\n            break;\n        case \"*\":\n            marks = [\n                {\n                    name: \"everything\",\n                    position: startPos\n                }\n            ];\n            pos++;\n            break;\n        case \"$\":\n            {\n                let identLen = parseRegex(str, pos + 1, IDENT);\n                if (identLen) {\n                    pos += 1 + identLen;\n                    marks = [\n                        {\n                            name: \"param\",\n                            position: startPos\n                        },\n                        {\n                            name: \"ident\",\n                            position: startPos + 1\n                        },\n                        {\n                            name: \"ident_end\",\n                            position: pos\n                        }\n                    ];\n                }\n                break;\n            }\n        default:\n            {\n                let numLen = parseRegex(str, pos, NUM);\n                if (numLen) {\n                    pos += numLen;\n                    let name = \"integer\";\n                    if (str[pos] === \".\") {\n                        let fracLen = parseRegex(str, pos + 1, NUM);\n                        if (fracLen) {\n                            name = \"float\";\n                            pos += 1 + fracLen;\n                        }\n                    }\n                    if (str[pos] === \"e\" || str[pos] === \"E\") {\n                        name = \"sci\";\n                        pos++;\n                        if (str[pos] === \"+\" || str[pos] === \"-\") {\n                            pos++;\n                        }\n                        let expLen = parseRegex(str, pos, NUM);\n                        if (!expLen) return {\n                            type: \"error\",\n                            position: pos\n                        };\n                        pos += expLen;\n                    }\n                    marks = [\n                        {\n                            name,\n                            position: startPos\n                        },\n                        {\n                            name: name + \"_end\",\n                            position: pos\n                        }\n                    ];\n                    break;\n                }\n                let identLen = parseRegex(str, pos, IDENT);\n                if (identLen) {\n                    pos += identLen;\n                    switch(str[pos]){\n                        case \":\":\n                        case \"(\":\n                            {\n                                let result = parseFuncCall(str, startPos, pos);\n                                if (result.type === \"error\") return result;\n                                marks = result.marks;\n                                pos = result.position;\n                                break;\n                            }\n                        default:\n                            {\n                                marks = [\n                                    {\n                                        name: \"this_attr\",\n                                        position: startPos\n                                    },\n                                    {\n                                        name: \"ident\",\n                                        position: startPos\n                                    },\n                                    {\n                                        name: \"ident_end\",\n                                        position: pos\n                                    }\n                                ];\n                            }\n                    }\n                    break;\n                }\n            }\n    }\n    if (!marks) {\n        return {\n            type: \"error\",\n            position: pos\n        };\n    }\n    let lhsLevel = 12;\n    let trav;\n    loop: while(true){\n        let innerPos = skipWS(str, pos);\n        if (innerPos === str.length) {\n            pos = innerPos;\n            break;\n        }\n        trav = parseTraversal(str, innerPos);\n        if (trav.type === \"success\") {\n            marks.unshift({\n                name: \"traverse\",\n                position: startPos\n            });\n            while(trav.type === \"success\"){\n                marks = marks.concat(trav.marks);\n                pos = trav.position;\n                trav = parseTraversal(str, skipWS(str, pos));\n            }\n            marks.push({\n                name: \"traversal_end\",\n                position: pos\n            });\n            continue;\n        }\n        let token2 = str[innerPos];\n        switch(token2){\n            case \"=\":\n                {\n                    let nextToken = str[innerPos + 1];\n                    switch(nextToken){\n                        case \">\":\n                            {\n                                if (level > PREC_PAIR || lhsLevel <= PREC_PAIR) break loop;\n                                let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);\n                                if (rhs.type === \"error\") return rhs;\n                                marks = marks.concat(rhs.marks);\n                                marks.unshift({\n                                    name: \"pair\",\n                                    position: startPos\n                                });\n                                pos = rhs.position;\n                                lhsLevel = PREC_PAIR;\n                                break;\n                            }\n                        case \"=\":\n                            {\n                                if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;\n                                let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);\n                                if (rhs.type === \"error\") return rhs;\n                                marks.unshift({\n                                    name: \"comp\",\n                                    position: startPos\n                                });\n                                marks.push({\n                                    name: \"op\",\n                                    position: innerPos\n                                }, {\n                                    name: \"op_end\",\n                                    position: innerPos + 2\n                                });\n                                marks = marks.concat(rhs.marks);\n                                pos = rhs.position;\n                                lhsLevel = PREC_COMP;\n                                break;\n                            }\n                        default:\n                            break loop;\n                    }\n                    break;\n                }\n            case \"+\":\n                {\n                    if (level > PREC_ADD || lhsLevel < PREC_ADD) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"add\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_ADD;\n                    break;\n                }\n            case \"-\":\n                {\n                    if (level > PREC_SUB || lhsLevel < PREC_SUB) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"sub\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_SUB;\n                    break;\n                }\n            case \"*\":\n                {\n                    if (str[innerPos + 1] === \"*\") {\n                        if (level > PREC_POW || lhsLevel <= PREC_POW) break loop;\n                        let rhs2 = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);\n                        if (rhs2.type === \"error\") return rhs2;\n                        marks = marks.concat(rhs2.marks);\n                        marks.unshift({\n                            name: \"pow\",\n                            position: startPos\n                        });\n                        pos = rhs2.position;\n                        lhsLevel = PREC_POW;\n                        break;\n                    }\n                    if (level > PREC_MUL || lhsLevel < PREC_MUL) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"mul\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_MUL;\n                    break;\n                }\n            case \"/\":\n                {\n                    if (level > PREC_DIV || lhsLevel < PREC_DIV) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"div\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_DIV;\n                    break;\n                }\n            case \"%\":\n                {\n                    if (level > PREC_MOD || lhsLevel < PREC_MOD) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"mod\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_MOD;\n                    break;\n                }\n            case \"<\":\n            case \">\":\n                {\n                    if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;\n                    let nextPos = innerPos + 1;\n                    if (str[nextPos] === \"=\") {\n                        nextPos++;\n                    }\n                    let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks.unshift({\n                        name: \"comp\",\n                        position: startPos\n                    });\n                    marks.push({\n                        name: \"op\",\n                        position: innerPos\n                    }, {\n                        name: \"op_end\",\n                        position: nextPos\n                    });\n                    marks = marks.concat(rhs.marks);\n                    pos = rhs.position;\n                    lhsLevel = PREC_COMP;\n                    break;\n                }\n            case \"|\":\n                {\n                    if (str[innerPos + 1] === \"|\") {\n                        if (level > PREC_OR || lhsLevel < PREC_OR) break loop;\n                        let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);\n                        if (rhs.type === \"error\") return rhs;\n                        marks = marks.concat(rhs.marks);\n                        marks.unshift({\n                            name: \"or\",\n                            position: startPos\n                        });\n                        pos = rhs.position;\n                        lhsLevel = PREC_OR;\n                    } else {\n                        if (level > 11 || lhsLevel < 11) break loop;\n                        let identPos = skipWS(str, innerPos + 1);\n                        let identLen = parseRegex(str, identPos, IDENT);\n                        if (!identLen) return {\n                            type: \"error\",\n                            position: identPos\n                        };\n                        pos = identPos + identLen;\n                        if (str[pos] === \"(\" || str[pos] === \":\") {\n                            let result = parseFuncCall(str, identPos, pos);\n                            if (result.type === \"error\") return result;\n                            marks = marks.concat(result.marks);\n                            marks.unshift({\n                                name: \"pipecall\",\n                                position: startPos\n                            });\n                            pos = result.position;\n                            lhsLevel = 11;\n                        }\n                    }\n                    break;\n                }\n            case \"&\":\n                {\n                    if (str[innerPos + 1] != \"&\") break loop;\n                    if (level > PREC_AND || lhsLevel < PREC_AND) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks = marks.concat(rhs.marks);\n                    marks.unshift({\n                        name: \"and\",\n                        position: startPos\n                    });\n                    pos = rhs.position;\n                    lhsLevel = PREC_AND;\n                    break;\n                }\n            case \"!\":\n                {\n                    if (str[innerPos + 1] !== \"=\") break loop;\n                    if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;\n                    let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);\n                    if (rhs.type === \"error\") return rhs;\n                    marks.unshift({\n                        name: \"comp\",\n                        position: startPos\n                    });\n                    marks.push({\n                        name: \"op\",\n                        position: innerPos\n                    }, {\n                        name: \"op_end\",\n                        position: innerPos + 2\n                    });\n                    marks = marks.concat(rhs.marks);\n                    pos = rhs.position;\n                    lhsLevel = PREC_COMP;\n                    break;\n                }\n            case \"d\":\n                {\n                    if (str.slice(innerPos, innerPos + 4) !== \"desc\") break loop;\n                    if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop;\n                    marks.unshift({\n                        name: \"desc\",\n                        position: startPos\n                    });\n                    pos = innerPos + 4;\n                    lhsLevel = PREC_ORDER;\n                    break;\n                }\n            case \"a\":\n                {\n                    if (str.slice(innerPos, innerPos + 3) !== \"asc\") break loop;\n                    if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop;\n                    marks.unshift({\n                        name: \"asc\",\n                        position: startPos\n                    });\n                    pos = innerPos + 3;\n                    lhsLevel = PREC_ORDER;\n                    break;\n                }\n            default:\n                {\n                    let ident = parseRegexStr(str, innerPos, IDENT);\n                    switch(ident){\n                        case \"in\":\n                            {\n                                if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;\n                                pos = skipWS(str, innerPos + 2);\n                                let isGroup = false;\n                                if (str[pos] === \"(\") {\n                                    isGroup = true;\n                                    pos = skipWS(str, pos + 1);\n                                }\n                                let rangePos = pos;\n                                let result = parseExpr(str, pos, PREC_COMP + 1);\n                                if (result.type === \"error\") return result;\n                                pos = skipWS(str, result.position);\n                                if (str[pos] === \".\" && str[pos + 1] === \".\") {\n                                    let type = \"inc_range\";\n                                    if (str[pos + 2] === \".\") {\n                                        type = \"exc_range\";\n                                        pos = skipWS(str, pos + 3);\n                                    } else {\n                                        pos = skipWS(str, pos + 2);\n                                    }\n                                    let rhs = parseExpr(str, pos, PREC_COMP + 1);\n                                    if (rhs.type === \"error\") return rhs;\n                                    marks.unshift({\n                                        name: \"in_range\",\n                                        position: startPos\n                                    });\n                                    marks = marks.concat({\n                                        name: type,\n                                        position: rangePos\n                                    }, result.marks, rhs.marks);\n                                    pos = rhs.position;\n                                } else {\n                                    marks.unshift({\n                                        name: \"comp\",\n                                        position: startPos\n                                    });\n                                    marks.push({\n                                        name: \"op\",\n                                        position: innerPos\n                                    }, {\n                                        name: \"op_end\",\n                                        position: innerPos + 2\n                                    });\n                                    marks = marks.concat(result.marks);\n                                }\n                                if (isGroup) {\n                                    pos = skipWS(str, pos);\n                                    if (str[pos] !== \")\") return {\n                                        type: \"error\",\n                                        position: pos\n                                    };\n                                    pos++;\n                                }\n                                lhsLevel = PREC_COMP;\n                                break;\n                            }\n                        case \"match\":\n                            {\n                                if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop;\n                                let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);\n                                if (rhs.type === \"error\") return rhs;\n                                marks.unshift({\n                                    name: \"comp\",\n                                    position: startPos\n                                });\n                                marks.push({\n                                    name: \"op\",\n                                    position: innerPos\n                                }, {\n                                    name: \"op_end\",\n                                    position: innerPos + 5\n                                });\n                                marks = marks.concat(rhs.marks);\n                                pos = rhs.position;\n                                lhsLevel = 4;\n                                break;\n                            }\n                        default:\n                            {\n                                break loop;\n                            }\n                    }\n                }\n        }\n    }\n    let failPosition = (trav == null ? void 0 : trav.type) === \"error\" && trav.position;\n    return {\n        type: \"success\",\n        marks,\n        position: pos,\n        failPosition\n    };\n}\nfunction parseTraversal(str, pos) {\n    let startPos = pos;\n    switch(str[pos]){\n        case \".\":\n            {\n                pos = skipWS(str, pos + 1);\n                let identStart = pos;\n                let identLen2 = parseRegex(str, pos, IDENT);\n                if (!identLen2) return {\n                    type: \"error\",\n                    position: pos\n                };\n                pos += identLen2;\n                return {\n                    type: \"success\",\n                    marks: [\n                        {\n                            name: \"attr_access\",\n                            position: startPos\n                        },\n                        {\n                            name: \"ident\",\n                            position: identStart\n                        },\n                        {\n                            name: \"ident_end\",\n                            position: pos\n                        }\n                    ],\n                    position: pos\n                };\n            }\n        case \"-\":\n            if (str[pos + 1] !== \">\") return {\n                type: \"error\",\n                position: pos\n            };\n            let marks = [\n                {\n                    name: \"deref\",\n                    position: startPos\n                }\n            ];\n            pos += 2;\n            let identPos = skipWS(str, pos);\n            let identLen = parseRegex(str, identPos, IDENT);\n            if (identLen) {\n                pos = identPos + identLen;\n                marks.push({\n                    name: \"deref_attr\",\n                    position: identPos\n                }, {\n                    name: \"ident\",\n                    position: identPos\n                }, {\n                    name: \"ident_end\",\n                    position: pos\n                });\n            }\n            return {\n                type: \"success\",\n                marks,\n                position: pos\n            };\n        case \"[\":\n            {\n                pos = skipWS(str, pos + 1);\n                if (str[pos] === \"]\") {\n                    return {\n                        type: \"success\",\n                        marks: [\n                            {\n                                name: \"array_postfix\",\n                                position: startPos\n                            }\n                        ],\n                        position: pos + 1\n                    };\n                }\n                let rangePos = pos;\n                let result = parseExpr(str, pos, 0);\n                if (result.type === \"error\") return result;\n                pos = skipWS(str, result.position);\n                if (str[pos] === \".\" && str[pos + 1] === \".\") {\n                    let type = \"inc_range\";\n                    if (str[pos + 2] === \".\") {\n                        type = \"exc_range\";\n                        pos += 3;\n                    } else {\n                        pos += 2;\n                    }\n                    pos = skipWS(str, pos);\n                    let rhs = parseExpr(str, pos, 0);\n                    if (rhs.type === \"error\") return rhs;\n                    pos = skipWS(str, rhs.position);\n                    if (str[pos] !== \"]\") return {\n                        type: \"error\",\n                        position: pos\n                    };\n                    return {\n                        type: \"success\",\n                        marks: [\n                            {\n                                name: \"slice\",\n                                position: startPos\n                            },\n                            {\n                                name: type,\n                                position: rangePos\n                            }\n                        ].concat(result.marks, rhs.marks),\n                        position: pos + 1\n                    };\n                }\n                if (str[pos] !== \"]\") return {\n                    type: \"error\",\n                    position: pos\n                };\n                return {\n                    type: \"success\",\n                    marks: [\n                        {\n                            name: \"square_bracket\",\n                            position: startPos\n                        }\n                    ].concat(result.marks),\n                    position: pos + 1\n                };\n            }\n        case \"|\":\n            {\n                pos = skipWS(str, pos + 1);\n                if (str[pos] === \"{\") {\n                    let result = parseObject(str, pos);\n                    if (result.type === \"error\") return result;\n                    result.marks.unshift({\n                        name: \"projection\",\n                        position: startPos\n                    });\n                    return result;\n                }\n                break;\n            }\n        case \"{\":\n            {\n                let result = parseObject(str, pos);\n                if (result.type === \"error\") return result;\n                result.marks.unshift({\n                    name: \"projection\",\n                    position: startPos\n                });\n                return result;\n            }\n    }\n    return {\n        type: \"error\",\n        position: pos\n    };\n}\nfunction parseFuncCall(str, startPos, pos) {\n    let marks = [];\n    marks.push({\n        name: \"func_call\",\n        position: startPos\n    });\n    if (str[pos] === \":\" && str[pos + 1] === \":\") {\n        marks.push({\n            name: \"namespace\",\n            position: startPos\n        });\n        marks.push({\n            name: \"ident\",\n            position: startPos\n        }, {\n            name: \"ident_end\",\n            position: pos\n        });\n        pos = skipWS(str, pos + 2);\n        let nameLen = parseRegex(str, pos, IDENT);\n        if (!nameLen) return {\n            type: \"error\",\n            position: pos\n        };\n        marks.push({\n            name: \"ident\",\n            position: pos\n        }, {\n            name: \"ident_end\",\n            position: pos + nameLen\n        });\n        pos = skipWS(str, pos + nameLen);\n        if (str[pos] !== \"(\") return {\n            type: \"error\",\n            position: pos\n        };\n        pos++;\n        pos = skipWS(str, pos);\n    } else {\n        marks.push({\n            name: \"ident\",\n            position: startPos\n        }, {\n            name: \"ident_end\",\n            position: pos\n        });\n        pos = skipWS(str, pos + 1);\n    }\n    let lastPos = pos;\n    if (str[pos] !== \")\") {\n        while(true){\n            let result = parseExpr(str, pos, 0);\n            if (result.type === \"error\") return result;\n            marks = marks.concat(result.marks);\n            lastPos = result.position;\n            pos = skipWS(str, result.position);\n            if (str[pos] !== \",\") break;\n            pos = skipWS(str, pos + 1);\n            if (str[pos] === \")\") break;\n        }\n    }\n    if (str[pos] !== \")\") {\n        return {\n            type: \"error\",\n            position: pos\n        };\n    }\n    marks.push({\n        name: \"func_args_end\",\n        position: lastPos\n    });\n    return {\n        type: \"success\",\n        marks,\n        position: pos + 1\n    };\n}\nfunction parseObject(str, pos) {\n    let marks = [\n        {\n            name: \"object\",\n            position: pos\n        }\n    ];\n    pos = skipWS(str, pos + 1);\n    while(str[pos] !== \"}\"){\n        let pairPos = pos;\n        if (str.slice(pos, pos + 3) === \"...\") {\n            pos = skipWS(str, pos + 3);\n            if (str[pos] !== \"}\" && str[pos] !== \",\") {\n                let expr = parseExpr(str, pos, 0);\n                if (expr.type === \"error\") return expr;\n                marks.push({\n                    name: \"object_splat\",\n                    position: pairPos\n                });\n                marks = marks.concat(expr.marks);\n                pos = expr.position;\n            } else {\n                marks.push({\n                    name: \"object_splat_this\",\n                    position: pairPos\n                });\n            }\n        } else {\n            let expr = parseExpr(str, pos, 0);\n            if (expr.type === \"error\") return expr;\n            let nextPos = skipWS(str, expr.position);\n            if (expr.marks[0].name === \"str\" && str[nextPos] === \":\") {\n                let value = parseExpr(str, skipWS(str, nextPos + 1), 0);\n                if (value.type === \"error\") return value;\n                marks.push({\n                    name: \"object_pair\",\n                    position: pairPos\n                });\n                marks = marks.concat(expr.marks, value.marks);\n                pos = value.position;\n            } else {\n                marks = marks.concat({\n                    name: \"object_expr\",\n                    position: pos\n                }, expr.marks);\n                pos = expr.position;\n            }\n        }\n        pos = skipWS(str, pos);\n        if (str[pos] !== \",\") break;\n        pos = skipWS(str, pos + 1);\n    }\n    if (str[pos] !== \"}\") {\n        return {\n            type: \"error\",\n            position: pos\n        };\n    }\n    pos++;\n    marks.push({\n        name: \"object_end\",\n        position: pos\n    });\n    return {\n        type: \"success\",\n        marks,\n        position: pos\n    };\n}\nfunction parseString(str, pos) {\n    let token = str[pos];\n    pos = pos + 1;\n    const marks = [\n        {\n            name: \"str\",\n            position: pos\n        }\n    ];\n    str: for(;; pos++){\n        if (pos > str.length) return {\n            type: \"error\",\n            position: pos\n        };\n        switch(str[pos]){\n            case token:\n                {\n                    marks.push({\n                        name: \"str_end\",\n                        position: pos\n                    });\n                    pos++;\n                    break str;\n                }\n            case \"\\\\\":\n                {\n                    marks.push({\n                        name: \"str_pause\",\n                        position: pos\n                    });\n                    if (str[pos + 1] === \"u\") {\n                        if (str[pos + 2] === \"{\") {\n                            marks.push({\n                                name: \"unicode_hex\",\n                                position: pos + 3\n                            });\n                            pos = str.indexOf(\"}\", pos + 3);\n                            marks.push({\n                                name: \"unicode_hex_end\",\n                                position: pos\n                            });\n                        } else {\n                            marks.push({\n                                name: \"unicode_hex\",\n                                position: pos + 2\n                            });\n                            marks.push({\n                                name: \"unicode_hex_end\",\n                                position: pos + 6\n                            });\n                            pos += 5;\n                        }\n                    } else {\n                        marks.push({\n                            name: \"single_escape\",\n                            position: pos + 1\n                        });\n                        pos += 1;\n                    }\n                    marks.push({\n                        name: \"str_start\",\n                        position: pos + 1\n                    });\n                }\n        }\n    }\n    return {\n        type: \"success\",\n        marks,\n        position: pos\n    };\n}\nfunction skipWS(str, pos) {\n    return pos + parseRegex(str, pos, WS);\n}\nfunction parseRegex(str, pos, re) {\n    let m = re.exec(str.slice(pos));\n    return m ? m[0].length : 0;\n}\nfunction parseRegexStr(str, pos, re) {\n    let m = re.exec(str.slice(pos));\n    return m ? m[0] : null;\n}\nfunction join(a, b) {\n    return (base)=>b(a(base));\n}\nfunction map(inner) {\n    return (base)=>({\n            type: \"Map\",\n            base,\n            expr: inner({\n                type: \"This\"\n            })\n        });\n}\nfunction flatMap(inner) {\n    return (base)=>({\n            type: \"FlatMap\",\n            base,\n            expr: inner({\n                type: \"This\"\n            })\n        });\n}\nfunction traverseArray(build, right) {\n    if (!right) {\n        return {\n            type: \"a-a\",\n            build\n        };\n    }\n    switch(right.type){\n        case \"a-a\":\n            return {\n                type: \"a-a\",\n                build: join(build, right.build)\n            };\n        case \"a-b\":\n            return {\n                type: \"a-b\",\n                build: join(build, right.build)\n            };\n        case \"b-b\":\n            return {\n                type: \"a-a\",\n                build: join(build, map(right.build))\n            };\n        case \"b-a\":\n            return {\n                type: \"a-a\",\n                build: join(build, flatMap(right.build))\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traversePlain(mapper, right) {\n    if (!right) {\n        return {\n            type: \"b-b\",\n            build: mapper\n        };\n    }\n    switch(right.type){\n        case \"a-a\":\n        case \"b-a\":\n            return {\n                type: \"b-a\",\n                build: join(mapper, right.build)\n            };\n        case \"a-b\":\n        case \"b-b\":\n            return {\n                type: \"b-b\",\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traverseElement(mapper, right) {\n    if (!right) {\n        return {\n            type: \"a-b\",\n            build: mapper\n        };\n    }\n    switch(right.type){\n        case \"a-a\":\n        case \"b-a\":\n            return {\n                type: \"a-a\",\n                build: join(mapper, right.build)\n            };\n        case \"a-b\":\n        case \"b-b\":\n            return {\n                type: \"a-b\",\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traverseProjection(mapper, right) {\n    if (!right) {\n        return {\n            type: \"b-b\",\n            build: mapper\n        };\n    }\n    switch(right.type){\n        case \"a-a\":\n            return {\n                type: \"a-a\",\n                build: join(map(mapper), right.build)\n            };\n        case \"a-b\":\n            return {\n                type: \"a-b\",\n                build: join(map(mapper), right.build)\n            };\n        case \"b-a\":\n            return {\n                type: \"b-a\",\n                build: join(mapper, right.build)\n            };\n        case \"b-b\":\n            return {\n                type: \"b-b\",\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nconst ESCAPE_SEQUENCE = {\n    \"'\": \"'\",\n    '\"': '\"',\n    \"\\\\\": \"\\\\\",\n    \"/\": \"/\",\n    b: \"\\b\",\n    f: \"\\f\",\n    n: \"\\n\",\n    r: \"\\r\",\n    t: \"\t\"\n};\nfunction expandHex(str) {\n    const charCode = parseInt(str, 16);\n    return String.fromCharCode(charCode);\n}\nclass GroqQueryError extends Error {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"name\", \"GroqQueryError\");\n    }\n}\nconst EXPR_BUILDER = {\n    group (p) {\n        const inner = p.process(EXPR_BUILDER);\n        return {\n            type: \"Group\",\n            base: inner\n        };\n    },\n    everything () {\n        return {\n            type: \"Everything\"\n        };\n    },\n    this () {\n        return {\n            type: \"This\"\n        };\n    },\n    parent () {\n        return {\n            type: \"Parent\",\n            n: 1\n        };\n    },\n    dblparent (p) {\n        const next = p.process(EXPR_BUILDER);\n        return {\n            type: \"Parent\",\n            n: next.n + 1\n        };\n    },\n    traverse (p) {\n        const base = p.process(EXPR_BUILDER);\n        const traversalList = [];\n        while(p.getMark().name !== \"traversal_end\"){\n            traversalList.push(p.process(TRAVERSE_BUILDER));\n        }\n        p.shift();\n        let traversal = null;\n        for(let i = traversalList.length - 1; i >= 0; i--){\n            traversal = traversalList[i](traversal);\n        }\n        if (base.type === \"Everything\" || base.type === \"Array\" || base.type === \"PipeFuncCall\") {\n            traversal = traverseArray((val)=>val, traversal);\n        }\n        if (traversal === null) throw new Error(\"BUG: unexpected empty traversal\");\n        return traversal.build(base);\n    },\n    this_attr (p) {\n        const name = p.processString();\n        if (name === \"null\") {\n            return {\n                type: \"Value\",\n                value: null\n            };\n        }\n        if (name === \"true\") {\n            return {\n                type: \"Value\",\n                value: true\n            };\n        }\n        if (name === \"false\") {\n            return {\n                type: \"Value\",\n                value: false\n            };\n        }\n        return {\n            type: \"AccessAttribute\",\n            name\n        };\n    },\n    neg (p) {\n        const base = p.process(EXPR_BUILDER);\n        return {\n            type: \"Neg\",\n            base\n        };\n    },\n    pos (p) {\n        const base = p.process(EXPR_BUILDER);\n        return {\n            type: \"Pos\",\n            base\n        };\n    },\n    add (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"+\",\n            left,\n            right\n        };\n    },\n    sub (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"-\",\n            left,\n            right\n        };\n    },\n    mul (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"*\",\n            left,\n            right\n        };\n    },\n    div (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"/\",\n            left,\n            right\n        };\n    },\n    mod (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"%\",\n            left,\n            right\n        };\n    },\n    pow (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op: \"**\",\n            left,\n            right\n        };\n    },\n    comp (p) {\n        const left = p.process(EXPR_BUILDER);\n        const op = p.processString();\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"OpCall\",\n            op,\n            left,\n            right\n        };\n    },\n    in_range (p) {\n        const base = p.process(EXPR_BUILDER);\n        const isInclusive = p.getMark().name === \"inc_range\";\n        p.shift();\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"InRange\",\n            base,\n            left,\n            right,\n            isInclusive\n        };\n    },\n    str (p) {\n        let value = \"\";\n        loop: while(p.hasMark()){\n            const mark = p.getMark();\n            switch(mark.name){\n                case \"str_end\":\n                    value += p.processStringEnd();\n                    break loop;\n                case \"str_pause\":\n                    value += p.processStringEnd();\n                    break;\n                case \"str_start\":\n                    p.shift();\n                    break;\n                case \"single_escape\":\n                    {\n                        const char = p.slice(1);\n                        p.shift();\n                        value += ESCAPE_SEQUENCE[char];\n                        break;\n                    }\n                case \"unicode_hex\":\n                    p.shift();\n                    value += expandHex(p.processStringEnd());\n                    break;\n                default:\n                    throw new Error(\"unexpected mark: \".concat(mark.name));\n            }\n        }\n        return {\n            type: \"Value\",\n            value\n        };\n    },\n    integer (p) {\n        const strValue = p.processStringEnd();\n        return {\n            type: \"Value\",\n            value: Number(strValue)\n        };\n    },\n    float (p) {\n        const strValue = p.processStringEnd();\n        return {\n            type: \"Value\",\n            value: Number(strValue)\n        };\n    },\n    sci (p) {\n        const strValue = p.processStringEnd();\n        return {\n            type: \"Value\",\n            value: Number(strValue)\n        };\n    },\n    object (p) {\n        const attributes = [];\n        while(p.getMark().name !== \"object_end\"){\n            attributes.push(p.process(OBJECT_BUILDER));\n        }\n        p.shift();\n        return {\n            type: \"Object\",\n            attributes\n        };\n    },\n    array (p) {\n        const elements = [];\n        while(p.getMark().name !== \"array_end\"){\n            let isSplat = false;\n            if (p.getMark().name === \"array_splat\") {\n                isSplat = true;\n                p.shift();\n            }\n            const value = p.process(EXPR_BUILDER);\n            elements.push({\n                type: \"ArrayElement\",\n                value,\n                isSplat\n            });\n        }\n        p.shift();\n        return {\n            type: \"Array\",\n            elements\n        };\n    },\n    tuple (p) {\n        const members = [];\n        while(p.getMark().name !== \"tuple_end\"){\n            members.push(p.process(EXPR_BUILDER));\n        }\n        p.shift();\n        return {\n            type: \"Tuple\",\n            members\n        };\n    },\n    func_call (p) {\n        let namespace = \"global\";\n        if (p.getMark().name === \"namespace\") {\n            p.shift();\n            namespace = p.processString();\n        }\n        const name = p.processString();\n        if (namespace === \"global\" && name === \"select\") {\n            const result = {\n                type: \"Select\",\n                alternatives: []\n            };\n            while(p.getMark().name !== \"func_args_end\"){\n                if (p.getMark().name === \"pair\") {\n                    if (result.fallback) throw new GroqQueryError(\"unexpected argument to select()\");\n                    p.shift();\n                    const condition = p.process(EXPR_BUILDER);\n                    const value = p.process(EXPR_BUILDER);\n                    result.alternatives.push({\n                        type: \"SelectAlternative\",\n                        condition,\n                        value\n                    });\n                } else {\n                    if (result.fallback) throw new GroqQueryError(\"unexpected argument to select()\");\n                    const value = p.process(EXPR_BUILDER);\n                    result.fallback = value;\n                }\n            }\n            p.shift();\n            return result;\n        }\n        const args = [];\n        while(p.getMark().name !== \"func_args_end\"){\n            if (argumentShouldBeSelector(namespace, name, args.length)) {\n                p.process(SELECTOR_BUILDER);\n                args.push({\n                    type: \"Selector\"\n                });\n            } else {\n                args.push(p.process(EXPR_BUILDER));\n            }\n        }\n        p.shift();\n        if (namespace === \"global\" && (name === \"before\" || name === \"after\")) {\n            if (p.parseOptions.mode === \"delta\") {\n                return {\n                    type: \"Context\",\n                    key: name\n                };\n            }\n        }\n        if (namespace === \"global\" && name === \"boost\" && !p.allowBoost) throw new GroqQueryError(\"unexpected boost\");\n        const funcs = namespaces[namespace];\n        if (!funcs) {\n            throw new GroqQueryError(\"Undefined namespace: \".concat(namespace));\n        }\n        const func = funcs[name];\n        if (!func) {\n            throw new GroqQueryError(\"Undefined function: \".concat(name));\n        }\n        if (func.arity !== void 0) {\n            validateArity(name, func.arity, args.length);\n        }\n        if (func.mode !== void 0 && func.mode !== p.parseOptions.mode) {\n            throw new GroqQueryError(\"Undefined function: \".concat(name));\n        }\n        return {\n            type: \"FuncCall\",\n            func,\n            namespace,\n            name,\n            args\n        };\n    },\n    pipecall (p) {\n        const base = p.process(EXPR_BUILDER);\n        p.shift();\n        let namespace = \"global\";\n        if (p.getMark().name === \"namespace\") {\n            p.shift();\n            namespace = p.processString();\n        }\n        if (namespace !== \"global\") {\n            throw new GroqQueryError(\"Undefined namespace: \".concat(namespace));\n        }\n        const name = p.processString();\n        const args = [];\n        const oldAllowBoost = p.allowBoost;\n        if (name === \"score\") {\n            p.allowBoost = true;\n        }\n        for(;;){\n            const markName = p.getMark().name;\n            if (markName === \"func_args_end\") {\n                break;\n            }\n            if (name === \"order\") {\n                if (markName === \"asc\") {\n                    p.shift();\n                    args.push({\n                        type: \"Asc\",\n                        base: p.process(EXPR_BUILDER)\n                    });\n                    continue;\n                } else if (markName === \"desc\") {\n                    p.shift();\n                    args.push({\n                        type: \"Desc\",\n                        base: p.process(EXPR_BUILDER)\n                    });\n                    continue;\n                }\n            }\n            args.push(p.process(EXPR_BUILDER));\n        }\n        p.shift();\n        p.allowBoost = oldAllowBoost;\n        const func = pipeFunctions[name];\n        if (!func) {\n            throw new GroqQueryError(\"Undefined pipe function: \".concat(name));\n        }\n        if (func.arity) {\n            validateArity(name, func.arity, args.length);\n        }\n        return {\n            type: \"PipeFuncCall\",\n            func,\n            base,\n            name,\n            args\n        };\n    },\n    pair (p) {\n        throw new GroqQueryError(\"unexpected =>\");\n    },\n    and (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"And\",\n            left,\n            right\n        };\n    },\n    or (p) {\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        return {\n            type: \"Or\",\n            left,\n            right\n        };\n    },\n    not (p) {\n        const base = p.process(EXPR_BUILDER);\n        return {\n            type: \"Not\",\n            base\n        };\n    },\n    asc (p) {\n        throw new GroqQueryError(\"unexpected asc\");\n    },\n    desc (p) {\n        throw new GroqQueryError(\"unexpected desc\");\n    },\n    param (p) {\n        const name = p.processString();\n        if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {\n            return {\n                type: \"Value\",\n                value: p.parseOptions.params[name]\n            };\n        }\n        return {\n            type: \"Parameter\",\n            name\n        };\n    }\n};\nconst OBJECT_BUILDER = {\n    object_expr (p) {\n        if (p.getMark().name === \"pair\") {\n            p.shift();\n            const condition = p.process(EXPR_BUILDER);\n            const value2 = p.process(EXPR_BUILDER);\n            return {\n                type: \"ObjectConditionalSplat\",\n                condition,\n                value: value2\n            };\n        }\n        const value = p.process(EXPR_BUILDER);\n        return {\n            type: \"ObjectAttributeValue\",\n            name: extractPropertyKey(value),\n            value\n        };\n    },\n    object_pair (p) {\n        const name = p.process(EXPR_BUILDER);\n        if (name.type !== \"Value\") throw new Error(\"name must be string\");\n        const value = p.process(EXPR_BUILDER);\n        return {\n            type: \"ObjectAttributeValue\",\n            name: name.value,\n            value\n        };\n    },\n    object_splat (p) {\n        const value = p.process(EXPR_BUILDER);\n        return {\n            type: \"ObjectSplat\",\n            value\n        };\n    },\n    object_splat_this () {\n        return {\n            type: \"ObjectSplat\",\n            value: {\n                type: \"This\"\n            }\n        };\n    }\n};\nconst TRAVERSE_BUILDER = {\n    square_bracket (p) {\n        const expr = p.process(EXPR_BUILDER);\n        const value = tryConstantEvaluate(expr);\n        if (value && value.type === \"number\") {\n            return (right)=>traverseElement((base)=>({\n                        type: \"AccessElement\",\n                        base,\n                        index: value.data\n                    }), right);\n        }\n        if (value && value.type === \"string\") {\n            return (right)=>traversePlain((base)=>({\n                        type: \"AccessAttribute\",\n                        base,\n                        name: value.data\n                    }), right);\n        }\n        return (right)=>traverseArray((base)=>({\n                    type: \"Filter\",\n                    base,\n                    expr\n                }), right);\n    },\n    slice (p) {\n        const isInclusive = p.getMark().name === \"inc_range\";\n        p.shift();\n        const left = p.process(EXPR_BUILDER);\n        const right = p.process(EXPR_BUILDER);\n        const leftValue = tryConstantEvaluate(left);\n        const rightValue = tryConstantEvaluate(right);\n        if (!leftValue || !rightValue || leftValue.type !== \"number\" || rightValue.type !== \"number\") {\n            throw new GroqQueryError(\"slicing must use constant numbers\");\n        }\n        return (rhs)=>traverseArray((base)=>({\n                    type: \"Slice\",\n                    base,\n                    left: leftValue.data,\n                    right: rightValue.data,\n                    isInclusive\n                }), rhs);\n    },\n    projection (p) {\n        const obj = p.process(EXPR_BUILDER);\n        return (right)=>traverseProjection((base)=>({\n                    type: \"Projection\",\n                    base,\n                    expr: obj\n                }), right);\n    },\n    attr_access (p) {\n        const name = p.processString();\n        return (right)=>traversePlain((base)=>({\n                    type: \"AccessAttribute\",\n                    base,\n                    name\n                }), right);\n    },\n    deref (p) {\n        let attr = null;\n        if (p.getMark().name === \"deref_attr\") {\n            p.shift();\n            attr = p.processString();\n        }\n        const wrap = (base)=>attr ? {\n                type: \"AccessAttribute\",\n                base,\n                name: attr\n            } : base;\n        return (right)=>traversePlain((base)=>wrap({\n                    type: \"Deref\",\n                    base\n                }), right);\n    },\n    array_postfix (p) {\n        return (right)=>traverseArray((base)=>({\n                    type: \"ArrayCoerce\",\n                    base\n                }), right);\n    }\n};\nconst SELECTOR_BUILDER = {\n    group (p) {\n        p.process(SELECTOR_BUILDER);\n        return null;\n    },\n    everything () {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    this () {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    parent () {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    dblparent (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    traverse (p) {\n        p.process(SELECTOR_BUILDER);\n        while(p.getMark().name !== \"traversal_end\"){\n            p.process(TRAVERSE_BUILDER);\n        }\n        p.shift();\n        return null;\n    },\n    this_attr (p) {\n        p.processString();\n        return null;\n    },\n    neg (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    pos (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    add (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    sub (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    mul (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    div (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    mod (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    pow (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    comp (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    in_range (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    str (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    integer (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    float (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    sci (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    object (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    array (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    tuple (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    func_call (p, mark) {\n        const func = EXPR_BUILDER.func_call(p, mark);\n        if (func.name === \"anywhere\" && func.args.length === 1) return null;\n        throw new Error(\"Invalid selector syntax\");\n    },\n    pipecall (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    pair (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    and (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    or (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    not (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    asc (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    desc (p) {\n        throw new Error(\"Invalid selector syntax\");\n    },\n    param (p) {\n        throw new Error(\"Invalid selector syntax\");\n    }\n};\nfunction extractPropertyKey(node) {\n    if (node.type === \"AccessAttribute\" && !node.base) {\n        return node.name;\n    }\n    if (node.type === \"Deref\" || node.type === \"Map\" || node.type === \"Projection\" || node.type === \"Slice\" || node.type === \"Filter\" || node.type === \"AccessElement\" || node.type === \"ArrayCoerce\") {\n        return extractPropertyKey(node.base);\n    }\n    throw new GroqQueryError(\"Cannot determine property key for type: \".concat(node.type));\n}\nfunction validateArity(name, arity, count) {\n    if (typeof arity === \"number\") {\n        if (count !== arity) {\n            throw new GroqQueryError(\"Incorrect number of arguments to function \".concat(name, \"(). Expected \").concat(arity, \", got \").concat(count, \".\"));\n        }\n    } else if (arity) {\n        if (!arity(count)) {\n            throw new GroqQueryError(\"Incorrect number of arguments to function \".concat(name, \"().\"));\n        }\n    }\n}\nfunction argumentShouldBeSelector(namespace, functionName, argCount) {\n    const functionsRequiringSelectors = [\n        \"changedAny\",\n        \"changedOnly\"\n    ];\n    return namespace == \"diff\" && argCount == 2 && functionsRequiringSelectors.includes(functionName);\n}\nclass GroqSyntaxError extends Error {\n    constructor(position){\n        super(\"Syntax error in GROQ query at position \".concat(position));\n        __publicField(this, \"position\");\n        __publicField(this, \"name\", \"GroqSyntaxError\");\n        this.position = position;\n    }\n}\nfunction parse(input, options = {}) {\n    const result = parse$1(input);\n    if (result.type === \"error\") {\n        throw new GroqSyntaxError(result.position);\n    }\n    const processor = new MarkProcessor(input, result.marks, options);\n    return processor.process(EXPR_BUILDER);\n}\n //# sourceMappingURL=1.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/groq-js/dist/1.mjs\n");

/***/ })

};
;