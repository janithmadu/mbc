"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/style-mod";
exports.ids = ["vendor-chunks/style-mod"];
exports.modules = {

/***/ "(ssr)/./node_modules/style-mod/src/style-mod.js":
/*!*************************************************!*\
  !*** ./node_modules/style-mod/src/style-mod.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StyleModule: () => (/* binding */ StyleModule)\n/* harmony export */ });\nconst C = \"ͼ\";\nconst COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C);\nconst SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\");\nconst top = typeof globalThis != \"undefined\" ? globalThis :  false ? 0 : {};\n// :: - Style modules encapsulate a set of CSS rules defined from\n// JavaScript. Their definitions are only available in a given DOM\n// root after it has been _mounted_ there with `StyleModule.mount`.\n//\n// Style modules should be created once and stored somewhere, as\n// opposed to re-creating them every time you need them. The amount of\n// CSS rules generated for a given DOM root is bounded by the amount\n// of style modules that were used. So to avoid leaking rules, don't\n// create these dynamically, but treat them as one-time allocations.\nclass StyleModule {\n    // :: (Object<Style>, ?{finish: ?(string) → string})\n    // Create a style module from the given spec.\n    //\n    // When `finish` is given, it is called on regular (non-`@`)\n    // selectors (after `&` expansion) to compute the final selector.\n    constructor(spec, options){\n        this.rules = [];\n        let { finish } = options || {};\n        function splitSelector(selector) {\n            return /^@/.test(selector) ? [\n                selector\n            ] : selector.split(/,\\s*/);\n        }\n        function render(selectors, spec, target, isKeyframes) {\n            let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\";\n            if (isAt && spec == null) return target.push(selectors[0] + \";\");\n            for(let prop in spec){\n                let value = spec[prop];\n                if (/&/.test(prop)) {\n                    render(prop.split(/,\\s*/).map((part)=>selectors.map((sel)=>part.replace(/&/, sel))).reduce((a, b)=>a.concat(b)), value, target);\n                } else if (value && typeof value == \"object\") {\n                    if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\");\n                    render(splitSelector(prop), value, local, keyframes);\n                } else if (value != null) {\n                    local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, (l)=>\"-\" + l.toLowerCase()) + \": \" + value + \";\");\n                }\n            }\n            if (local.length || keyframes) {\n                target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") + \" {\" + local.join(\" \") + \"}\");\n            }\n        }\n        for(let prop in spec)render(splitSelector(prop), spec[prop], this.rules);\n    }\n    // :: () → string\n    // Returns a string containing the module's CSS rules.\n    getRules() {\n        return this.rules.join(\"\\n\");\n    }\n    // :: () → string\n    // Generate a new unique CSS class name.\n    static newName() {\n        let id = top[COUNT] || 1;\n        top[COUNT] = id + 1;\n        return C + id.toString(36);\n    }\n    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})\n    //\n    // Mount the given set of modules in the given DOM root, which ensures\n    // that the CSS rules defined by the module are available in that\n    // context.\n    //\n    // Rules are only added to the document once per root.\n    //\n    // Rule order will follow the order of the modules, so that rules from\n    // modules later in the array take precedence of those from earlier\n    // modules. If you call this function multiple times for the same root\n    // in a way that changes the order of already mounted modules, the old\n    // order will be changed.\n    //\n    // If a Content Security Policy nonce is provided, it is added to\n    // the `<style>` tag generated by the library.\n    static mount(root, modules, options) {\n        let set = root[SET], nonce = options && options.nonce;\n        if (!set) set = new StyleSet(root, nonce);\n        else if (nonce) set.setNonce(nonce);\n        set.mount(Array.isArray(modules) ? modules : [\n            modules\n        ]);\n    }\n}\nlet adoptedSet = new Map //<Document, StyleSet>\n;\nclass StyleSet {\n    constructor(root, nonce){\n        let doc = root.ownerDocument || root, win = doc.defaultView;\n        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {\n            let adopted = adoptedSet.get(doc);\n            if (adopted) {\n                root.adoptedStyleSheets = [\n                    adopted.sheet,\n                    ...root.adoptedStyleSheets\n                ];\n                return root[SET] = adopted;\n            }\n            this.sheet = new win.CSSStyleSheet;\n            root.adoptedStyleSheets = [\n                this.sheet,\n                ...root.adoptedStyleSheets\n            ];\n            adoptedSet.set(doc, this);\n        } else {\n            this.styleTag = doc.createElement(\"style\");\n            if (nonce) this.styleTag.setAttribute(\"nonce\", nonce);\n            let target = root.head || root;\n            target.insertBefore(this.styleTag, target.firstChild);\n        }\n        this.modules = [];\n        root[SET] = this;\n    }\n    mount(modules) {\n        let sheet = this.sheet;\n        let pos = 0 /* Current rule offset */ , j = 0 /* Index into this.modules */ ;\n        for(let i = 0; i < modules.length; i++){\n            let mod = modules[i], index = this.modules.indexOf(mod);\n            if (index < j && index > -1) {\n                this.modules.splice(index, 1);\n                j--;\n                index = -1;\n            }\n            if (index == -1) {\n                this.modules.splice(j++, 0, mod);\n                if (sheet) for(let k = 0; k < mod.rules.length; k++)sheet.insertRule(mod.rules[k], pos++);\n            } else {\n                while(j < index)pos += this.modules[j++].rules.length;\n                pos += mod.rules.length;\n                j++;\n            }\n        }\n        if (!sheet) {\n            let text = \"\";\n            for(let i = 0; i < this.modules.length; i++)text += this.modules[i].getRules() + \"\\n\";\n            this.styleTag.textContent = text;\n        }\n    }\n    setNonce(nonce) {\n        if (this.styleTag && this.styleTag.getAttribute(\"nonce\") != nonce) this.styleTag.setAttribute(\"nonce\", nonce);\n    }\n} // Style::Object<union<Style,string>>\n //\n // A style is an object that, in the simple case, maps CSS property\n // names to strings holding their values, as in `{color: \"red\",\n // fontWeight: \"bold\"}`. The property names can be given in\n // camel-case—the library will insert a dash before capital letters\n // when converting them to CSS.\n //\n // If you include an underscore in a property name, it and everything\n // after it will be removed from the output, which can be useful when\n // providing a property multiple times, for browser compatibility\n // reasons.\n //\n // A property in a style object can also be a sub-selector, which\n // extends the current context to add a pseudo-selector or a child\n // selector. Such a property should contain a `&` character, which\n // will be replaced by the current selector. For example `{\"&:before\":\n // {content: '\"hi\"'}}`. Sub-selectors and regular properties can\n // freely be mixed in a given object. Any property containing a `&` is\n // assumed to be a sub-selector.\n //\n // Finally, a property can specify an @-block to be wrapped around the\n // styles defined inside the object that's the property's value. For\n // example to create a media query you can do `{\"@media screen and\n // (min-width: 400px)\": {...}}`.\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/style-mod/src/style-mod.js\n");

/***/ })

};
;